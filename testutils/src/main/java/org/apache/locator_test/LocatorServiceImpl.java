/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.apache.locator_test;

import java.util.logging.Logger;
import com.iona.ws._2005._11.locator.EndpointNotExistFault;
import com.iona.ws._2005._11.locator.LocatorService;

/**
 * This class was generated by the CXF 2.0-incubator-M1-SNAPSHOT Thu Nov 02
 * 16:39:27 CST 2006 Generated source version: 2.0-incubator-M1-SNAPSHOT
 */

@javax.jws.WebService(name = "LocatorService",  
                      serviceName = "LocatorService", 
                      portName = "LocatorServicePort", 
                      targetNamespace = "http://ws.iona.com/2005/11/locator", 
                      endpointInterface = "com.iona.ws._2005._11.locator.LocatorService")
public class LocatorServiceImpl implements LocatorService {

    static final Logger LOG = Logger.getLogger(LocatorServiceImpl.class.getName());

    public void registerPeerManager(
                                    org.apache.cxf.ws.addressing.EndpointReferenceType peerManager,
                                    javax.xml.ws.Holder<
                                        org.apache.cxf.ws.addressing.EndpointReferenceType> 
                                            peerManagerReference,
                                    javax.xml.ws.Holder<java.lang.String> nodeId) {
        LOG.info("Executing operation registerPeerManager");
    }

    public void deregisterPeerManager(java.lang.String nodeId) {
        LOG.info("Executing operation deregisterPeerManager");
    }

    public void registerEndpoint(com.iona.ws._2005._11.locator.types.EndpointIdentity endpointId,
                                 org.apache.cxf.ws.addressing.EndpointReferenceType endpointReference) {
        LOG.info("Executing operation registerEndpoint");
    }

    public void deregisterEndpoint(com.iona.ws._2005._11.locator.types.EndpointIdentity endpointId,
                                   org.apache.cxf.ws.addressing.EndpointReferenceType endpointReference) {
        LOG.info("Executing operation deregisterEndpoint");
    }

    public org.apache.cxf.ws.addressing.EndpointReferenceType lookupEndpoint(
        javax.xml.namespace.QName serviceQname)
        throws EndpointNotExistFault {
        LOG.info("Executing operation lookupEndpoint");
        return new org.apache.cxf.ws.addressing.EndpointReferenceType();
        // throw new EndpointNotExistFault("EndpointNotExistFault...");
    }

    
    public java.util.List<
        com.iona.ws._2005._11.locator.types.ListEndpointsResponse.Endpoint> listEndpoints() {
        LOG.info("Executing operation listEndpoints");
        return null;
    }

    
    public java.util.List<
        com.iona.ws._2005._11.locator.types.QueryEndpointsResponse.Endpoint> queryEndpoints(
            com.iona.ws._2005._11.locator.query.QuerySelectType select) {
        LOG.info("Executing operation queryEndpoints");
        return null;
    }

}
