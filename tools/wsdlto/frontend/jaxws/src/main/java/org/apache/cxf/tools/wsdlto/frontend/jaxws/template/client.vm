/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package $intf.PackageName;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;

/**
 * This class was generated by the CXF $version
 * $currentdate
 * Generated source version: $version
 * 
 */

public final class ${clientClassName} {

    private static final QName SERVICE_NAME = new QName("$intf.Namespace", "$service.ServiceName");

    private ${clientClassName}() {
    }

    public static void main(String args[]) throws Exception {

        if (args.length == 0) { 
            System.out.println("please specify wsdl");
            System.exit(1); 
        }
        URL wsdlURL = null;
        File wsdlFile = new File(args[0]);
        try {
            if (wsdlFile.exists()) {
                wsdlURL = wsdlFile.toURL();
            } else {
                wsdlURL = new URL(args[0]);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
      
        $service.Name ss = new ${service.Name}(wsdlURL, SERVICE_NAME);
        $intf.Name port = ss.get${port.Name}();  
        
#foreach ($method in $intf.Methods)

        System.out.println("Invoking ${method.Name}...");
#if($method.Exceptions.size() > 0)
        try{
            #if($method.return.Type != "void")
            $method.return.ClassName _${method.Name}_$method.return.Name=#end  port.${method.Name}(#foreach ($parameter in $method.Parameters) ${parameter.DefaultTypeValue}  #if ($velocityCount != $method.parameterCount) , #end #end);
            #if($method.return.Type != "void")
            System.out.println("${method.Name}.result=" + _${method.Name}_$method.return.Name);
            #end
        }#foreach($exception in $method.Exceptions)
        catch($exception.ClassName e){ 
        System.out.println("Expected exception: $exception.Name has occurred.");
        System.out.println(e.toString());
        }#end
        #else
        #if($method.return.ClassName != "void")$method.return.ClassName _${method.Name}_$method.return.Name =#end port.${method.Name}(#foreach($parameter in $method.Parameters)${parameter.DefaultTypeValue}#if($velocityCount != $method.parameterCount),#end#end);
#end#if($method.return.Type != "void")
        #end
#end
        
        
        System.exit(0);
    }

}
