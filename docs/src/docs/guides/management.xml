<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership. The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License. You may obtain a copy of the License at
 
  http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en-US">
  <title>Using CeltiXfire Management</title>

  <section>
    <title>Overview</title>

    <para>CeltiXfire management features are implemented using the Java
    Management Extensions(JMX). These features include:</para>

    <itemizedlist>
      <listitem>
        <para>instrumentation of key CeltiXfire runtime components as JMX
        MBeans</para>
      </listitem>

      <listitem>
        <para>support for dynamically exposing the MBeans of the CeltiXfire
        runtime components</para>
      </listitem>

      <listitem>
        <para>support for static registration of custom MBeans</para>
      </listitem>

      <listitem>
        <para>support for dynamic registration of custom MBeans</para>
      </listitem>
    </itemizedlist>

    <para>Once components of a CeltiXfire-enabled application are exposed as
    MBeans they can be monitored and managed using any JMX compliant
    management console. They can also be monitored and managed using the
    JMXRemote APIs.</para>
  </section>

  <section id="instrumented">
    <title>Instrumented CeltiXfire Components</title>

    <para>The following CeltiXfire runtime components are instrumented and can
    be exposed as JMX MBeans:</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="bus">CeltixBus</link></para>
      </listitem>

      <listitem>
        <para><link linkend="workqueue">WorkQueue</link></para>
      </listitem>

      <listitem>
        <para><link linkend="wsdlmgr">WSDLManager</link></para>
      </listitem>

      <listitem>
        <para><link linkend="endpt">Endpoint</link></para>
      </listitem>

      <listitem>
        <para><link linkend="http">HTTPServerTransport</link></para>
      </listitem>

      <listitem>
        <para><link linkend="jms">JMSServerTransort</link></para>
      </listitem>
    </itemizedlist>

    <para>The components are registered with the CeltiXfire MbeanServer as
    Model Dynamic MBeans. They are named following the guidelines laid out in
    the JMX best practices document at <ulink
    url="http://java.sun.com/products/JavaManagement/best-practices.html">http://java.sun.com/products/JavaManagement/best-practices.html</ulink>.
    All CeltiXfire runtime MBeans are registered using
    <literal>org.objectweb.celtix.instrumentation</literal> as their domain
    name. The remaining properties used to make up each MBean's ObjectName is
    made up of a combination of the bus name and other information from the
    service's WSDL contract.</para>

    <para><xref linkend="Table1" /> lists the ObjectName for each of the
    instrumented CeltiXfire components.</para>

    <table id="Table1">
      <title>Instrumented CeltiXfire Component ObjectNames</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry>Component</entry>

            <entry>Properties</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>CeltixBus</entry>

            <entry><constant>type=Bus,name=</constant><replaceable>busName</replaceable></entry>
          </row>

          <row>
            <entry>WorkQueue</entry>

            <entry><constant>type=Bus.WorkQueue,Bus=</constant><replaceable>busName</replaceable>
            <constant>,name=WorkQueue</constant></entry>
          </row>

          <row>
            <entry>WSDLManager</entry>

            <entry><constant>type=Bus.WSDLManager,Bus=</constant><replaceable>busName</replaceable>
            <constant>,name=WSDLManager</constant></entry>
          </row>

          <row>
            <entry>Endpoint</entry>

            <entry><constant>type=Bus.Endpoint,Bus=</constant><replaceable>busName</replaceable>
            <constant>,Bus.Service=</constant><replaceable>WSDLServiceQName</replaceable>
            <constant>,Bus.Port=</constant><replaceable>WSDLPort</replaceable><constant>,name=Endpoint</constant></entry>
          </row>

          <row>
            <entry>HTTP Server Transport</entry>

            <entry><constant>type=Bus.Service.Port.HTTPServerTransport,Bus=</constant>
            <replaceable>busName</replaceable><constant>,Bus.Service=</constant>
            <replaceable>WSDLServiceQName</replaceable><constant>,Bus.Port=</constant>
            <replaceable>WSDLPort</replaceable><constant>,name=HTTPServerTransport</constant></entry>
          </row>

          <row>
            <entry>JMS Server Transport</entry>

            <entry><constant>type=Bus.Service.Port.JMSServerTransport,Bus=</constant>
            <replaceable>busName</replaceable><constant>,Bus.Service=</constant>
            <replaceable>WSDLServiceQName</replaceable><constant>,Bus.Port=</constant>
            <replaceable>WSDLPort</replaceable><constant>,name=JMSServerTransport</constant></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>For example, the MBean for the Endpoint component corresponding to
    the <sgmltag class="element">port</sgmltag> element
    <literal>SOAPPort</literal> shown in <xref linkend="example1" /> would
    have the ObjectName:</para>

    <programlisting>org.objectweb.celtix.instrumentation:type=Bus.Endpoint,Bus=hello_bus,Bus.Service={http://obejectweb.org/hello_world}SOAPService,
Bus.Port=SoapPort,name=Endpoint</programlisting>

    <example id="example1">
      <title>Definition for a Managed Endpoint</title>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsdl:definitions name="HelloWorld" targetNamespace="http://objectweb.org/hello_world" 
    xmlns="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
    xmlns:tns="http://objectweb.org/hello_world"
    xmlns:x1="http://objectweb.org/hello_world/types"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
...
    &lt;wsdl:service name="SOAPService"&gt;
        &lt;wsdl:port binding="tns:Greeter_SOAPBinding" name="SoapPort"&gt;
            &lt;soap:address location="http://localhost:9000/SoapContext/SoapPort"/&gt;
        &lt;/wsdl:port&gt;
    &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;</programlisting>
    </example>

    <section id="bus">
      <title>CeltixBus</title>

      <para>The CeltixBus component is responsible for loading and managing
      the transports and bindings in use by a CeltiXfire-enabled application.
      It also manages the flow of messages between the network and the
      WorkQueue that is responsible for processing the message.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table2" /> lists the managed attributes for the
        CeltixBus component.</para>

        <table id="Table2">
          <title>Managed Attributes for the CelixBus Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>TransportFactories</entry>

                <entry>Specifies the list of all transport factories loaded by
                the bus instance.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>BindingFactories</entry>

                <entry>Specifies a list of all binding factories loaded by the
                bus instance.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>ServiceMonitoring</entry>

                <entry>Specifies if transport performance monitoring is
                enabled.</entry>

                <entry><type>Boolean</type></entry>

                <entry>RW</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>

    <section id="workqueue">
      <title>WorkQueue</title>

      <para>The WorkQueue component manages the processing of messages by the
      servants implementing the service's business logic. It instantiates
      servants and passes data to and from them.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table3" /> lists the managed attributes for the
        WorkQueue component.</para>

        <table id="Table3">
          <title>Managed Attributes for the WorkQueue Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ThreadingModel</entry>

                <entry>Specifies the threading model in use. Possible values
                are <constant>SINGLE_THREADED</constant> and
                <constant>MULTI_THREADED</constant>.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>WorkQueueSize</entry>

                <entry>Specifies the number of threads in the WorkQueue's
                thread pool.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>Empty</entry>

                <entry>Specifies if the WorkQueue is empty.</entry>

                <entry><type>Boolean</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>HighWaterMark</entry>

                <entry>Specifies the maximum threads available to the
                WorkQueue's thread pool.</entry>

                <entry><type>Integer</type></entry>

                <entry>RW</entry>
              </row>

              <row>
                <entry>LowWaterMark</entry>

                <entry>Specifies the minimum number of threads available in
                the WorkQueue's thread pool.</entry>

                <entry><type>Integer</type></entry>

                <entry>RW</entry>
              </row>

              <row>
                <entry>Full</entry>

                <entry>Specifies if the WorkQueue is full.</entry>

                <entry><type>Boolean</type></entry>

                <entry>R</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>

    <section id="wsdlmgr">
      <title>WSDLManager</title>

      <para>The WSDLManager component provides a WSDL registry and a numer of
      methods to retrieve WSDL.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table4" /> lists the managed attributes for the
        WSDLManager component.</para>

        <table id="Table4">
          <title>Managed Attributes for the WSDLManager Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Services</entry>

                <entry>Specifies the list of services loaded by the WSDL
                manager. The services are identified by their QName.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>Ports</entry>

                <entry>Specifies the list of <sgmltag
                class="element">port</sgmltag> elements loaded by the WSDL
                Manager. The <sgmltag class="element">port</sgmltag> elements
                are identified by the value of their <sgmltag
                class="attribute">name</sgmltag> attribute.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>Bindings</entry>

                <entry>Specifies the list of binding elements loaded by the
                WSDL manager. The binding elements are identified by the value
                of their <sgmltag class="attribute">name</sgmltag>
                attribute.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>

      <simplesect>
        <title>Operations</title>

        <para><xref linkend="Table5" /> lists the operations supported by the
        WSDLManager component.</para>

        <table id="Table5">
          <title>Operations Supported by the WSDLManager Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Parameters</entry>

                <entry>Return Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>GetOperation</entry>

                <entry>Returns the list of <sgmltag
                class="element">operation</sgmltag> elements for a given
                endpoint. The <sgmltag class="element">operation</sgmltag>
                elements are identified by the value of their <sgmltag
                class="attribute">name</sgmltag> attribute.</entry>

                <entry><parameter>serviceQName</parameter> <para></para>
                <parameter>portTypeName</parameter></entry>

                <entry><type>String[]</type></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>

    <section id="endpt">
      <title>Endpoint</title>

      <para>The Endpoint component represents an endpoint running inside of
      the CeltiXfire runtime. It allows you to monitor and control the state
      of an endpoint based on its service name and port name.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table6" /> lists the managed attributes for the
        Endpoint component.</para>

        <table id="Table6">
          <title>Managed Attributes for the Endpoint Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ServiceName</entry>

                <entry>Specifies the service QName implemented by the
                endpoint.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>PortName</entry>

                <entry>Specifies the <sgmltag class="element">port</sgmltag>
                element used to register the endpoint. The <sgmltag
                class="element">port</sgmltag> element is identified by the
                value of its <sgmltag class="attribute">name</sgmltag>
                attribute.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>HandlerChains</entry>

                <entry>Specifies the list of
                <classname>MassageHandler</classname> objects used by the
                endpoint. The objects are identified by their class
                name.</entry>

                <entry><type>String[]</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>State</entry>

                <entry>Specifies the state of the service</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>

      <simplesect>
        <title>Operations</title>

        <para><xref linkend="Table7" /> lists the operations provided by the
        Endpoint component.</para>

        <table id="Table7">
          <title>Operations Provided by the Endpoint Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Parameters</entry>

                <entry>Return Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>start</entry>

                <entry>Activates the endpoint to accept requests.</entry>

                <entry><parameter>None</parameter></entry>

                <entry><type>Void</type></entry>
              </row>

              <row>
                <entry>stop</entry>

                <entry>Deactivates the endpoint.</entry>

                <entry><parameter>None</parameter></entry>

                <entry><type>Void</type></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>

    <section id="http">
      <title>HTTPServerTransport</title>

      <para>The HTTPServerTransport component is created when the Endpoint
      component receives an HTTP address to instantiate. It provides a logical
      view of the HTTP transport for the service side.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table8" /> lists the managed attributes for the
        HTTPServerTransport component.</para>

        <table id="Table8">
          <title>Managed Attributes for the HTTPServerTransport
          Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ServiceName</entry>

                <entry>Specifies the QName of the service using this instance
                of the HTTP server transport.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>PortName</entry>

                <entry>Specifies the <sgmltag class="element">port</sgmltag>
                element of the endpoint using this instance of the HTTP server
                tranport. The <sgmltag class="element">port</sgmltag> element
                is identified by the value of its <sgmltag
                class="attribute">name</sgmltag> attribute.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>URL</entry>

                <entry>Specifies the URL to which this instance of the HTTP
                server transport listens.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>TotalError</entry>

                <entry>Species the number of request processing errors handled
                by this endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>RequestTotal</entry>

                <entry>Specifies the number of requests received by this
                endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>RequestOneWay</entry>

                <entry>Specifies the number of oneway requests received by
                this endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>

    <section id="jms">
      <title>JMSServerTransport</title>

      <para>The JMSServerTransport component is created when the Endpoint
      receives a JMS address to instantiate. It provides a logical view of the
      JMS transport for the service side.</para>

      <simplesect>
        <title>Attributes</title>

        <para><xref linkend="Table9" /> lists the managed attributes for the
        JMSServerTransport component.</para>

        <table id="Table9">
          <title>Managed Attributes for the JMSServerTransport
          Component</title>

          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>

                <entry>Description</entry>

                <entry>Type</entry>

                <entry>Read/Write</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>ServiceName</entry>

                <entry>Specifies the QName of the service using this instance
                of the JMS server transport.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>PortName</entry>

                <entry>Specifies the <sgmltag class="element">port</sgmltag>
                element of the endpoint using this instance of the JMS server
                tranport. The <sgmltag class="element">port</sgmltag> element
                is identified by the value of its <sgmltag
                class="attribute">name</sgmltag> attribute.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>URL</entry>

                <entry>Specifies the URL to which this instance of the HTTP
                server transport listens.</entry>

                <entry><type>String</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>TotalError</entry>

                <entry>Species the number of request processing errors handled
                by this endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>RequestTotal</entry>

                <entry>Specifies the number of requests received by this
                endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>

              <row>
                <entry>RequestOneWay</entry>

                <entry>Specifies the number of oneway requests received by
                this endpoint.</entry>

                <entry><type>Integer</type></entry>

                <entry>R</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </simplesect>
    </section>
  </section>

  <section>
    <title>Adding Instrumentation to a CeltiXfire-enabled Application</title>

    <para>CeltiXfire supports the creation and registration of custom MBeans
    inside of CeltiXfire-enabled applications. A service developer can create
    one or more MBeans to instrument their service. These custom MBeans can
    then be registered with the CeltiXfire MBean server. This makes it
    possible to manage a service using the same interface as the CeltiXfire
    runtime components.</para>

    <para>There are two ways to add custom instrumentation to a
    CeltiXfire-enabled application:</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="jmx">implement one of the JMX MBean interfaces and
        register it with the CeltiXfire MBeanServer</link></para>
      </listitem>

      <listitem>
        <para><link linkend="celtix">implement the CeltiXfire
        <classname>Instrumentation</classname> interface</link></para>
      </listitem>
    </itemizedlist>

    <para>Functionally, there is no difference between the two approaches. You
    can base your decision on the ease of development, maintainability, and
    portability.</para>

    <section id="jmx">
      <title>Using the JMX MBean Interfaces</title>

      <para>The CeltiXfire MBean server can be accessed through the CeltiXfire
      bus and allows for the registration of user developed MBeans. This
      allows you to instrument your service implementation by developing a
      custom MBean using one of the JMX MBean interfaces and registering it
      with the CeltiXfire MBean server. Your custom instrumentation will then
      be accessible through the same JMX connection as the CeltiXfire internal
      components used by your service.</para>

      <simplesect>
        <title>Creating your custom MBean</title>

        <para>When you use the JMX APIs to instrument your service
        implementation, you follow the design methodology laid out by the JMX
        specification. This involves the following steps:</para>

        <procedure>
          <step>
            <para>Decide what type of MBean you wish to use.</para>

            <itemizedlist>
              <listitem>
                <para>Standard MBeans expose a management interface that is
                defined at development time.</para>
              </listitem>

              <listitem>
                <para>Dynamic MBeans expose their management interface at run
                time.</para>
              </listitem>
            </itemizedlist>
          </step>

          <step>
            <para>Create the MBean interface to expose the properties and
            operations used to manager your service implementation.</para>

            <itemizedlist>
              <listitem>
                <para>Standard MBeans use the
                <interfacename>MBean</interfacename> inteface.</para>
              </listitem>

              <listitem>
                <para>Dynamic MBeans use the
                <interfacename>DynamicMBean</interfacename> interface.</para>
              </listitem>
            </itemizedlist>
          </step>

          <step>
            <para>Implement the MBean class.</para>
          </step>
        </procedure>

        <para><xref linkend="Example2" /> shows the interface for a standard
        MBean.</para>

        <example id="Example2">
          <title>Standard MBean Interface</title>

          <programlisting>public interface ServerNameMBean
{
  String getServiceName();
  String getAddress();
}</programlisting>
        </example>

        <para><xref linkend="Example3" /> shows the class that implements the
        MBean defined in <xref linkend="Example2" />.</para>

        <example id="Example3">
          <title>MBean Implementation</title>

          <programlisting>public class ServerName
{
  String getServiceName()
  {
    return "SOAPService";
  }

  String getAddress()
  {
    return "12 IONA Way";
  }
}</programlisting>
        </example>
      </simplesect>

      <simplesect>
        <title>Registering the MBean</title>

        <para>For your MBean to be exposed to a management console, it must be
        registered with the CeltiXfire MBean server. The CeltiXfire MBean
        server is accessible through the bus. Typically, this will be done
        when your service is initialized.</para>

        <para>To register a custom MBean do the following:</para>

        <procedure>
          <step>
            <para>Instantiate your custom MBean.</para>
          </step>

          <step>
            <para>Get an instance of the the bus using
            <methodname>Bus.getCurrent()</methodname>.</para>
          </step>

          <step>
            <para>Get the CeltiXfire MBean server from the bus using
            <methodname>bus.getInstrumentationManager().getMBeanServer()</methodname>.</para>
          </step>

          <step>
            <para>Create an <classname>ObjectName</classname> for your
            MBean.</para>

            <note>
              <para>It is recommended that you follow the naming conventions
              suggested in <xref linkend="instrumented" />. However, you can
              choose any naming scheme you desire.</para>
            </note>
          </step>

          <step>
            <para>Register your MBean server using the server’s
            <methodname>registerMBean()</methodname> method.</para>
          </step>
        </procedure>

        <para><xref linkend="Example4" /> shows code for registering a custom
        MBean with the Cetlix MBean server.</para>

        <example id="Example4">
          <title>Registering a Custom MBean</title>

          <programlisting>import javax.management.MBeanServer;
import javax.management.ObjectName;
import org.objectweb.celtix.Bus;

...
// Instantiate the MBean
ServerName sName = new ServerName();

// Get the MBean server
Bus bus.getCurrent();
MBeanServer mbserver = bus.getInstrumentationManager().getMBeanServer();

// Create ObjectName
ObjectName name = new ObjectName("my.demo.instrumentation:type=CustomMBean,Bus=" + bus.getBusID() + "name=ServerNameMBean");

// Register MBean
mbserver.registerMBean(sName, name);
...</programlisting>
        </example>
      </simplesect>
    </section>

    <section id="celtix">
      <title>Using the CeltiXfire Instrumentation Interface</title>

      <para>If you don not want to use the JMX APIs to add instrumentation to
      your service, you can use the CeltiXfire
      <classname>Instrumentation</classname> interface. This interface wraps
      the JMX subsystem in a CeltiXfire specific API. You do not need to
      access the CeltiXfire MBean server to register your Instrumentation
      because the CeltiXfire wrappers handle it all for you.</para>

      <note>
        <para>You will, however, be responsible for cleaning up all instances
        of your custom instrumentation.</para>
      </note>

      <para>To add custom instrumentation using the
      <interfacename>Instrumentation</interfacename> interface do the
      following:</para>

      <procedure>
        <step>
          <para><link linkend="writeclass">Write</link> an instrumentation
          class that implements the
          <interfacename>org.objectweb.celtix.Instrumentation</interfacename>
          interface.</para>
        </step>

        <step>
          <para>When your service is starting up, <link
          linkend="activate">activate</link> your instrumentation object by
          instantiating it and registering it with the bus.</para>
        </step>

        <step>
          <para>When your service is shutting down, <link
          linkend="deactivate">deactivate</link> your instrumentation by
          unregistering it and cleaning it up.</para>
        </step>
      </procedure>

      <simplesect id="writeclass">
        <title>Implementing the instrumentation class</title>

        <para>Like an MBean a CeltiXfire instrumentation class is responsible
        for providing access to the attributes you want to track and implement
        any management operations you want to expose. Unlike an MBean a
        CeltiXfire instrumentation class does not implement a user defined
        interface. Instead, a CeltiXfire instrumentation class implements a
        CeltiXfire defined interface, <classname>Instrumentation</classname>,
        and defines the operations required to expose the attributes and
        operations you desire.</para>

        <para>The CeltiXfire management facilities use JDK 5.0 annotations to
        create a <classname>MBeanInfoAssembler</classname>. The
        <classname>MBeanInfoAssember</classname> reads the CeltiXfire provided
        annotations to identify the attributes and operations that are to be
        exposed. It then uses the information to create a ModelMBean that is
        registered with the Celix MBean server.</para>

        <para><xref linkend="Table10" /> lists the JDK 5.0 annotations used
        when implementing your instrumentation class.</para>

        <table id="Table10">
          <title>CeltiXfire JMX Annotations</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Purpose</entry>

                <entry>JDK 5.0 Annotation</entry>

                <entry>Attribute / Annotation Type</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>Mark all instances of a class as a JMX managed
                resource</entry>

                <entry><literal
                role="annotation">@ManagedResource</literal></entry>

                <entry>Class</entry>
              </row>

              <row>
                <entry>Mark a method as a JMX operation.</entry>

                <entry><classname>@ManagedOperation</classname></entry>

                <entry>Method</entry>
              </row>

              <row>
                <entry>Mark a getter or a setter as one half of a JMX
                attribute.</entry>

                <entry><classname>@ManagedAttribute</classname></entry>

                <entry>Method</entry>
              </row>

              <row>
                <entry>Describe the parameters of a managed operation.</entry>

                <entry><classname>@ManagedOperationParameter</classname>
                <para></para>
                <classname>@ManagedOperationParameters</classname></entry>

                <entry>Method</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para><xref linkend="Table11" /> lists the metadata that can be
        provided along with the CeltiXfire JMX annotations.</para>

        <table id="Table11">
          <title>CeltiXfire JMX Annotations Metadata</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry>Parameter</entry>

                <entry>Description</entry>

                <entry>Annotation</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry><parameter>componentName</parameter></entry>

                <entry>Specifies the name of the managed respurce.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>description</parameter></entry>

                <entry>Specifies a user-friendly description of the resource,
                attribute, or operation.</entry>

                <entry><literal role="annotation">ManagedResource</literal>
                <para></para> <literal
                role="annotation">ManagedAttribute</literal> <para></para>
                <literal role="annotation">ManagedOperation</literal>
                <para></para> <literal
                role="annotation">ManagedOperationParameter</literal></entry>
              </row>

              <row>
                <entry><parameter>currencyTimeLimit</parameter></entry>

                <entry>Specifies the value of the currencyTimeLimt descriptor
                field.</entry>

                <entry><literal role="annotation">ManagedResource</literal>
                <para></para> <literal
                role="annotation">ManagedAttribute</literal></entry>
              </row>

              <row>
                <entry><parameter>defaultValue</parameter></entry>

                <entry>Specifies the value of the defaultValue descriptor
                field.</entry>

                <entry><classname>ManagedAttribute</classname></entry>
              </row>

              <row>
                <entry><parameter>log</parameter></entry>

                <entry>Specifies the value of the log descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>logFile</parameter></entry>

                <entry>Specifies the value of the logFile descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>persistPolicy</parameter></entry>

                <entry>Specifies the value of the persistPolicy descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>persistPeriod</parameter></entry>

                <entry>Specifies the value of the persistPeriod descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>persistLocation</parameter></entry>

                <entry>Specifies the value of the persistLocation descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>persistName</parameter></entry>

                <entry>Specifies the value of the persistName descriptor
                field.</entry>

                <entry><literal
                role="annotation">ManagedResource</literal></entry>
              </row>

              <row>
                <entry><parameter>name</parameter></entry>

                <entry>Specifies the display name of an operation
                parameter.</entry>

                <entry><literal
                role="annotation">ManagedOperationParameter</literal></entry>
              </row>

              <row>
                <entry><parameter>index</parameter></entry>

                <entry>Specifies the index of an operation parameter.</entry>

                <entry><literal
                role="annotation">ManagedOperationParameter</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>When you are implementing your custom instrumentation class, you
        should annotate the class with <literal
        role="annotation">ManagedResource</literal>. Any management operation
        you wish to expose within the instrumentation class should be
        annotated with <literal role="annotation">ManagedOperation</literal>.
        For attributes you wish to expose, you will should annotate their
        getter and setter methods with the ManagedAttribute attribute. If you
        want to make an attribute read-only or write-only, you can omit the
        annotation from either its setter method or its getter method.</para>

        <para><xref linkend="Example5" /> shows a CeltiXfire instrumentation
        class.</para>

        <example id="Example5">
          <title>A CeltiXfire Instrumentation Class</title>

          <programlisting>import org.objectweb.celtix.bus.management.jmx.export.ManagedAttribute;
import org.objectweb.celtix.bus.management.jmx.export.ManagedOperation;
import org.objectweb.celtix.bus.management.jmx.export.ManagedResource;

@ManagedResource(componentName="GreeterInstrumentation",
                 description="CeltiXfire instrumentation demo.",
                 currencyTimeLimit=15, persistPolicy="OnUpdate")
public class GreeterInstrumentation implements Instrumentation {

  private GreeterImpl greeter;

  public GreeterInstrumentation(GreeterImpl gi) {
    greeter = gi;
  }

  // set up the management component type name
  public String getInstrumentationName() {
    return "GreeterInstrumentation";
  }

  // set up the management component reference
  public Object getComponent() {
    return thins;
  }

  // set up the unique name for the ObjectName
  public String getUniqueInstrumentationName() {
    return ",name=Demo.Management";
  }

  // The attributes being exposed through JMX
  @ManagedAttribute(description="Get the GreetMe call counter")
  public Integer getGreetMeCounter() {
    return greeter.requestCounters[0];
  }

  @ManagedAttribute(description="Get the Ping me call counter")
  public Integer getPingMeCounter() {
    return greeter.requestCounters[3];
  }

  @ManagedAttribute(description="Set the Ping me call counter");\
  public void setPingMeCounter(Integer value) {
    greeter.requestCounters[3] = value;
  }

  // The operations being exposed through JXM
  @ManagedOperation(description="Set the SayHi reutrn name.",
                    currencyTimeLimit=-1)
  public void setSayHiReturnName(String name) {
    greeter.returnName = name;
  }
}</programlisting>
        </example>
      </simplesect>

      <simplesect id="activate">
        <title>Activating your custom instrumentation</title>

        <para>To make your custom instrumentation available to management
        consoles you must create an instance of your instrumentation class and
        register it with the bus. The handles the creation of the ModelMBean
        to represent your instrumentation. It also handles the registration of
        the MBean with the MBean server.</para>

        <para>To activate your custom instrumentation do the following:</para>

        <procedure>
          <step>
            <para>Create an instance of your instrumentation class.</para>
          </step>

          <step>
            <para>Get the current bus instance.</para>
          </step>

          <step>
            <para>Get the <classname>InstrumentationManager</classname> from
            the bus.</para>
          </step>

          <step>
            <para>Register your instrumentation instance with the
            <classname>InstrumentationManager</classname>.</para>
          </step>
        </procedure>

        <para><xref linkend="Example6" /> shows code for activating your
        custom instrumentation.</para>

        <example id="Example6">
          <title>Activating Custom CeltiXfire Instrumentation</title>

          <programlisting>import org.objectweb.celtix.bus.management.Instrumentation;
import org.objectweb.celtix.bus.management.InstrumentationManager;

...
Instrumentation in = new GreeterInstrumentation(this);
Bus bus = Bus.getCurrent();
InstrumentationManager im = bus.getInstrumentationManager();
im.register(in);</programlisting>
        </example>
      </simplesect>

      <simplesect id="deactivate">
        <title>Deactivating your custom instrumentation</title>

        <para>Unlike MBeans created using the JMX APIs, CeltiXfire
        instrumentation classes must be cleaned up. You must explicitly tell
        the bus to remove the ModelMBean created for your instrumentation
        using the <methodname>InstrumentationManager.unregister()</methodname>
        method. This method removes the MBean from the CeltiXfire MBean
        server, destroys the associated ModelMBean, and frees up any resources
        used by it.</para>

        <para><xref linkend="Example7" /> shows code for deactivating your
        custom instrumentation.</para>

        <example id="Example7">
          <title>Deactivating Custom CeltiXfire Instrumentation</title>

          <programlisting>import org.objectweb.celtix.bus.management.InstrumentationManager;

...
Bus bus = Bus.getCurrent();
InstrumentationManager im = bus.getInstrumentationManager();
im.unregister(in);</programlisting>
        </example>
      </simplesect>
    </section>
  </section>

  <section>
    <title>Configuring CeltiXfire Management Features</title>

    <para>The CeltiXfire management configuration is specified using the
    <classname>org.objectweb.celtix.bus.instrumentation.instrumentation_config.spring.InstrumentationConfigBean</classname>
    class. This class consists of two properties:</para>

    <itemizedlist>
      <listitem>
        <para><link linkend="instrumentcontrol">im:instrumentationControl</link> configures the 
		instrumentation event listener that collects the JMX provided data.</para>
      </listitem>

      <listitem>
        <para><link linkend="mbserver">im:MBServer</link> configures the
        JMXConnectorServer that runs the CeltiXfire MBean server.</para>
      </listitem>
    </itemizedlist>

    <para>In order to use the management configuration you are must specify
    the namespace under which the CeltiXfire management configuration
    properties are defined. You do this by adding the line shown below to the
    beans element of your configuration file.</para>

    <programlisting>xmlns:im="http://celtix.objectweb.org/bus/instrumentation"</programlisting>

    <simplesect id="instrumentcontrol">
      <title>Configuring the instrumentation event listeners</title>

      <para><xref linkend="Table12" /> lists the values for the
      <classname>im:instrumentationControl</classname> property.</para>

      <table id="Table12">
        <title>instrumentationControl Values</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Value</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><classname>InstrumentationEnable</classname></entry>

              <entry>Specifies if the CeltiXfire runtime's instrumentation
              created and removed events are enabled or disabled.</entry>
            </row>

            <row>
              <entry><classname>JMXEnable</classname></entry>

              <entry>Specifies if the CeltiXfire JMX MBean register and
              unregister events are enabled or disabled.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </simplesect>

    <simplesect id="mbserver">
      <title>Configuring the MBean server</title>

      <para><xref linkend="Table13" /> lists the values for the
      <classname>im:MBServer</classname> property.</para>

      <table id="Table13">
        <title>MBServer Values</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Value</entry>

              <entry>Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><classname>JMXConnector</classname></entry>

              <entry>Specifies how to set up the JMXConnectorServer which
              provides the remote connection to a JMXServer. This value has
              three sub-values: <itemizedlist>
                  <listitem>
                    <para><classname>Threaded</classname> specifies specifies
                    if the JMXConnectorServer can run in a new thread. The
                    default value is <constant>false</constant>.</para>
                  </listitem>

                  <listitem>
                    <para><classname>Daemon</classname> specifies if the
                    thread created for the JMXConnectorServer runs in Daemon
                    mode. The default value is
                    <constant>true</constant>.</para>

                    <note>
                      <para>This is only applicable if
                      <classname>Threaded</classname> is set to
                      <constant>true</constant>.</para>
                    </note>
                  </listitem>

                  <listitem>
                    <para><classname>JMXServiceURL</classname> specifies the
                    JMXServiceURL used for remote access through the JMX
                    Remote API. For more information see the <ulink
                    url="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/remote/rmi/package-summary.html">JMX
                    remote.rmi package documentation</ulink>.</para>
                  </listitem>
                </itemizedlist></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>For more information on configuring CeltiXfire see the <ulink
      url="site:config">CeltiXfire Configuration Guide</ulink>.</para>
    </simplesect>
  </section>

  <section>
    <title>Accessing CeltiXfire MBeans from a Management Console</title>

    <para>CeltiXfire runtime MBeans can be accessed remotely using JMXRemote.
    This means that any management console that supports JMXRemote can be used
    to monitor and manage CeltiXfire-enabled applications.</para>

    <para>As a starting point, JDK 1.5 provides a lightweight JMX console
    called jconsole. To view the management information for a deployed
    CeltiXfire-enabled application using jconsole do the following:</para>

    <procedure>
      <step>
        <para>Launch the jconsole application using the command
        <userinput>JDK_HOME/bin/jconsole</userinput>.</para>
      </step>

      <step>
        <para>Select the <guibutton>Advanced</guibutton> tab.</para>
      </step>

      <step>
        <para>Enter the URL of your CeltiXfire MBean server in the
        <guilabel>JMXServiceURL</guilabel> field.</para>
      </step>
    </procedure>

    <para>The URL of your CeltiXfire MBean server will either be the default
    CeltiXfire JMXServiceURL or the value specified by the
    <classname>JMXServiceURL</classname> property in your application
    configuration.</para>
  </section>
</article>