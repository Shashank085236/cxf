<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en-US">
  <title>Deploying CeltiXfire into a Servlet Container</title>

  <sect1>
    <title>Overview</title>

    <para>It is possible to deploy a CeltiXfire Web service endpoint into a
    servlet container such as Tomcat. The sample applications hello_world and
    hello_world_RPCLit demonstrate this capability. However, these examples
    illustrate a very basic approach to accomplishing this task. This document
    will discuss alternative approaches that are more scalable and
    efficient.</para>

    <para>Before discussing these alternative approaches, it is essential that
    you understand what is needed to deploy a CeltiXfire Web service endpoint
    into Tomcat. If you need guidance on installing Tomcat, refer to the last
    section in this document – <xref linkend="tomcat_install" />.</para>
  </sect1>

  <sect1>
    <title>A Deployed CeltiXfire Web Service</title>

    <para>Go to either the hello_world or hello_world_RPCLit examples and
    follow the instructions to build the <filename>.war</filename> file.
    Instructions for performing this task are near the end of the
    <filename>README</filename> file. The <filename>.war</filename> file is
    generated into the <filename>build/war</filename> directory. Review the
    content of the <filename>build.xml</filename> file in either example. Note
    that it has targets to create the <filename>.war</filename> file and to
    run the client application against the Tomcat hosted Web service. If you
    would rather run the client using java directly, refer to the instructions
    in the <filename>README</filename> file.</para>

    <para>If desired, copy one, or both, of the <filename>.war</filename>
    files to the Tomcat <filename>webapps</filename> directory, start Tomcat,
    and run the client application(s).</para>

    <para>Use <application>WinZip</application> to open the
    <filename>.war</filename> file and view its contents; then extract the
    archive to a temporary location.</para>

    <figure id="fig_1">
      <title>CeltiXfire WAR Structure</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="./images/tomcat_war.gif" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Alternatively, if you installed the <filename>.war</filename>
    file(s) into Tomcat, you can view the contents from the
    <filename>webapps</filename> directory; the files will have been extracted
    into a directory with a name corresponding to the name of the
    <filename>.war</filename> file (without the <filename>.war</filename>
    extension).</para>

    <para>The <filename>classes</filename> directory includes the code
    generated from the WSDL file plus any additional files you have added to
    the application. Note that files from both the server and client
    application are included. Obviously, the client related files are not
    needed and will not be included in the alternative approaches discussed
    later in this document.</para>

    <para>The <filename>lib</filename> directory includes all of the JAR files
    from your CeltiXfire installation's <filename>lib</filename> directory,
    and the <filename>wsdl</filename> directory contains the WSDL file for the
    application.</para>

    <para>The <filename>WEB-INF</filename> directory includes two XML files:
    <filename>web.xml</filename> and <filename>celtix-servlet.xml</filename>.
    You need to understand the content of these files in order to appreciate
    the alternative approaches described in this document.</para>

    <sect2>
      <title>The XML Files</title>

      <para><filename>web.xml</filename> is the standard servlet deployment
      descriptor file while <filename>celtix-servlet.xml</filename> includes
      configuration information specific to the CeltiXfire Web service
      endpoint.</para>

      <sect3>
        <title>The web.xml File</title>

        <para>Although this file contains the standard servlet configuration
        information, you need to review its contents.</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                         "http://java.sun.com/j2ee/dtds/web-app_2_3.dtd"&gt;
&lt;web-app&gt;
  &lt;display-name&gt;celtix&lt;/display-name&gt;
  &lt;description&gt;celtix&lt;/description&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;celtix&lt;/servlet-name&gt;
    &lt;display-name&gt;celtix&lt;/display-name&gt;
    &lt;description&gt;Celtix endpoint&lt;/description&gt;
    &lt;servlet-class&gt;
      org.objectweb.celtix.bus.jaxws.servlet.CeltixServlet
    &lt;/servlet-class&gt;
    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;celtix&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/celtix/*&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
  &lt;session-config&gt;
    &lt;session-timeout&gt;60&lt;/session-timeout&gt;
  &lt;/session-config&gt;
&lt;/web-app&gt;</programlisting>

        <para>Note that the servlet class is not actually part of your
        application. It is pre-written and part of your CeltiXfire
        installation. This class file is located in the file
        <filename>celtix-rt-<replaceable>version
        number</replaceable>.jar</filename>, which is one of the files
        included in the <filename>lib</filename> directory.</para>

        <para>Also note the <sgmltag class="element">url-pattern</sgmltag>
        entry <literal>/celtix/*</literal>. This will become part the the URL
        that client applications use to invoke on the Web service.</para>
      </sect3>

      <sect3>
        <title>The celtix-servlet.xml File</title>

        <para>This file contains content specific to the cXf Web service
        application.</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;endpoints&gt;
  &lt;endpoint name="hello_world"
            interface="org.objectweb.hello_world_soap_http.Greeter"
            implementation="demo.hw.server.GreeterImpl"
            wsdl="WEB-INF/wsdl/hello_world.wsdl"
            service="{http://objectweb.org/hello_world_soap_http}SOAPService"
            port="{http://objectweb.org/hello_world_soap_http}SOAPPort"
            url-pattern="/hello_world" /&gt;
&lt;/endpoints&gt;</programlisting>

        <para>Notice that all information related to a specific Web service is
        specified as attributes within the <sgmltag
        class="element">endpoint</sgmltag> tag. The origin of most of these
        entries is straight-forward, being derived either from declarations in
        the WSDL file or from the class names of code generated from the WSDL
        file. The value for the <sgmltag class="attribute">wsdl</sgmltag>
        attribute is the path to the application's WSDL file relative to the
        application's installation directory under the Tomcat
        <filename>webapps</filename> directory, and the values of the <sgmltag
        class="attribute">service</sgmltag> and <sgmltag
        class="attribute">port</sgmltag> attributes are derived from a
        combination of the target namespace and service, or port, name
        specified in the WSDL file.</para>

        <para>The value for the <sgmltag
        class="attribute">url-pattern</sgmltag> attribute is the same as the
        <sgmltag class="attribute">name</sgmltag> attribute, but that is not a
        firm requirement. What is important, however, is that this entry will
        also become part of the URL that client applications will use to
        invoke on the Web service.</para>

        <para>As you will see later in this document, if you want to deploy
        multiple CeltiXfire Web service endpoints into the same Tomcat
        instance, you can simply add additional <sgmltag
        class="element">endpoint</sgmltag> elements to this XML file.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>The Endpoint URL</title>

    <para>In order to access the Web service endpoint, client applications
    need a URL. Since the endpoint is hosted within Tomcat, access will be
    through the TCP/IP port used by Tomcat and not through the URL specified
    in the WSDL file. In the CeltiXfire example applications, access to the
    hello_world Web service deployed into Tomcat uses the URL
    <literal>http://hostname:port/helloworld/celtix/hello_world</literal> and
    access to the hello_world_RPCLit Web service uses the URL
    <literal>http://hostname:port/helloworldrpclit/celtix/hello_world_rpclit</literal></para>

    <para>Where:</para>

    <orderedlist>
      <listitem>
        <para><literal>http://hostname:port</literal> refer to the host and
        TCP/IP port used by Tomcat (for Tomcat, the default port is generally
        8080).</para>
      </listitem>

      <listitem>
        <para><literal>/helloworld</literal> or
        <literal>/helloworldrpclit</literal> are derived from the name of the
        subdirectory under the Tomcat <filename>webapps</filename> directory
        that contains the application (note that this subdirectory has the
        same name as the <filename>.war</filename> file).</para>
      </listitem>

      <listitem>
        <para><literal>/celtix</literal> is derived from the value of the
        <sgmltag class="element">url-pattern</sgmltag> entry in
        <filename>web.xml</filename>.</para>
      </listitem>

      <listitem>
        <para><literal>/hello_world</literal> or
        <literal>/hello_world_rpclit</literal> are derived from the value of
        the url-pattern attribute within the <sgmltag
        class="element">endpoint</sgmltag> tag in
        <filename>celtix-servlet.xml</filename>.</para>
      </listitem>
    </orderedlist>

    <para>You should note how these URLs are specified when running the sample
    applications. If you choose to run the client application using Ant, the
    URL is derived from information supplied on the command line combined with
    information that is already included in the <markup>&lt;target
    name=“client-servlet”...&gt;&lt;celtix-run.../&gt;&lt;/target&gt;</markup>
    tags in <filename>build.xml</filename>. If you run the application using
    java, you must supply the URL as a command line parameter.</para>
  </sect1>

  <sect1>
    <title>Alternative Deployment Approaches</title>

    <para>While the approach used in the CeltiXfire example applications
    demonstrates how CeltiXfire Web services can be deployed into Tomcat,
    there are some improvements that you can make.</para>

    <itemizedlist>
      <listitem>
        <para>The client related files do not need to be included.</para>
      </listitem>

      <listitem>
        <para>The server mainline file is also not required.</para>
      </listitem>

      <listitem>
        <para>Many of the CeltiXfire JAR files are not needed.</para>
      </listitem>

      <listitem>
        <para>The CeltiXfire JAR files can be moved into the
        <filename>shared/lib</filename> subdirectory under your Tomcat
        installation. With this arrangement, these files are shared by all
        CeltiXfire applications that are deployed into Tomcat.</para>
      </listitem>

      <listitem>
        <para>Multiple Web services can be deployed within the same directory
        hierarchy rather than deploying each service into a unique
        subdirectory under the Tomcat <filename>webapps</filename>
        directory.</para>
      </listitem>
    </itemizedlist>

    <para>Once you have deployed the first Web service, you can deploy
    additional endpoints into the same directory hierarchy by simply copying
    the <filename>.class</filename> files and WSDL file corresponding to the
    Web service and extending <filename>celtix-servlet.xml</filename> with
    another <sgmltag class="element">endpoint</sgmltag> entry. There is no
    need to actually generate the <filename>.war</filename> file, which will
    include files (client mainline, server mainline, CeltiXfire JARS, and
    <filename>web.xml</filename>) that you do not need.</para>

    <para>To illustrate these points, you can rework the hello_world and
    hello_world_RPCLit demos, combining them into a single servlet
    application.</para>

    <sect2>
      <title>Removing Extraneous Files</title>

      <para>If you have not done so already, copy the
      <filename>.war</filename> files from the hello_world and
      hello_world_RPCLit example applications into the Tomcat
      <filename>webapps</filename> directory. Start Tomcat, which causes the
      <filename>.war</filename> files to be unpacked into subdirectories under
      <filename>webapps</filename>. Stop Tomcat and open a command window, or
      Windows explorer, to the subdirectory
      (<filename>webapps/helloworld</filename>) holding one of the hello_world
      deployed applications.</para>

      <sect3>
        <title>Removing Unneeded Application Files</title>

        <para>Under the
        <filename>webapps/helloworld/WEB-INF/classes/demo/hw</filename>
        directory, delete the entire <filename>client</filename> subdirectory
        and the file <filename>Server.class</filename> from the
        <filename>server</filename> subdirectory; be certain to leave the
        <filename>.class</filename> file corresponding to the implementation
        class. Also remove the <filename>Server.class</filename> file from the
        <filename>webapps/helloworldrpclit/WEB-INF/classes/demo/hwRPCLit/server</filename>
        subdirectory.</para>
      </sect3>

      <sect3>
        <title>Removing Unneeded CeltiXfire JAR Files</title>

        <para>Delete the following JAR files from the
        <filename>webapps/helloworld/WEB-INF/lib</filename> directory:
        (REVISIT at v1.0 GA.)</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Relocating the CeltiXfire JAR Files</title>

      <para>Move the contents of the
      <filename>webapps/helloworld/WEB-INF/lib</filename> directory into the
      <filename>shared/lib</filename> directory. The CeltiXfire JAR files will
      now be available to all CeltiXfire applications deployed into this
      Tomcat instance. (REVISIT at v1.0 GA; approach to generating, and
      contents of, the <filename>.war</filename> file may change.)</para>
    </sect2>

    <sect2>
      <title>Installing Multiple Web Services into a Common Directory
      Hierarchy</title>

      <para>To avoid some confusion, you will first rename the
      <filename>webapps/helloworld</filename> directory to
      <filename>webapps/applications</filename>. Then you are going to copy
      the files from the hello_world_RPCLit example into the corresponding
      subdirectories under <filename>webapps/applications</filename>. Finally,
      you will edit the <filename>celtix-servlet.xml</filename> file, adding a
      second <sgmltag class="element">endpoint</sgmltag> element that
      describes the hello_world_RPCLit service. When you restart Tomcat both
      endpoints will be accessed through a URL beginning with a common
      context:
      <literal>http://hostname:port/applications/celtix/</literal>.</para>

      <procedure>
        <step>
          <para>Be certain that Tomcat is not running.</para>
        </step>

        <step>
          <para>Rename the directory <filename>webapps/helloworld</filename>
          to <filename>webapps/applications</filename>. Expand each
          subdirectory.</para>
        </step>

        <step>
          <para>Copy the directory
          <filename>webapps/helloworldrpclit/WEB-INF/classes/demo/hwRPCLit</filename>
          and paste it into the directory
          <filename>webapps/applications/WEB-INF/classes/demo</filename>. This
          step copies the directory containing the endpoint application,
          specifically the implementation class, from the hello_world_RPCLit
          example into the combined deployment.</para>
        </step>

        <step>
          <para>Copy the directory
          <filename>webapps/helloworldrpclit/WEB-INF/classes/demo/org/objectweb/hello_world_rpclit</filename>
          and paste it into the directory
          <filename>webapps/applications/WEB-INF/classes/demo/orb/objectweb</filename>.
          This step copies the directory containing the types generated from
          the hello_world_RPCLit example's WSDL file into the combined
          deployment.</para>

          <figure>
            <title>CeltiXfire WAR Updated for Demos</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="./images/tomcat_war2.gif" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>

        <step>
          <para>Copy the file
          <filename>webapps/helloworldrpclit/WEB-INF/wsdl/hello_world_RPCLit.wsdl</filename>
          and paste it into the directory
          <filename>webapps/applications/WEB-INF/wsdl</filename>.</para>
        </step>

        <step>
          <para>In a text editor, open the file
          <filename>webapps/helloworldrpclit/WEB-INF/celtix-servlet.xml</filename>
          and copy the entire <sgmltag class="element">endpoint</sgmltag>
          element. Paste this content into the file
          <filename>webapps/applications/WEB-INF/celtix-servlet.xml</filename>
          and save the file.</para>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;endpoints&gt;
  &lt;endpoint name="hello_world_rpclit"
            interface="org.objectweb.hello_world_rpclit.GreeterRPCLit"
            implementation="demo.hwRPCLit.server.GreeterRPCLitImpl"
            wsdl="WEB-INF/wsdl/hello_world_RPCLit.wsdl"
            service="{http://objectweb.org/hello_world_rpclit}SOAPServiceRPCLit"
            port="{http://objectweb.org/hello_world_rpclit}SOAPPortRPCLit"
            url-pattern="/hello_world_rpclit" /&gt;
  &lt;endpoint name="hello_world"
            interface="org.objectweb.hello_world_soap_http.Greeter"
            implementation="demo.hw.server.GreeterImpl"
            wsdl="WEB-INF/wsdl/hello_world.wsdl"
            service="{http://objectweb.org/hello_world_soap_http}SOAPService"
            port="{http://objectweb.org/hello_world_soap_http}SOAPPort"
            url-pattern="/hello_world" /&gt;
&lt;/endpoints&gt;</programlisting>
        </step>

        <step>
          <para>Delete the <filename>helloworldrpclit</filename> subdirectory
          and the two <filename>.war</filename> files from the
          <filename>webapps</filename> directory.</para>
        </step>

        <step>
          <para>Restart Tomcat.</para>
        </step>

        <step>
          <para>Access the hello_world_RPCLit Web service using the URL:
          <literal>http://hostname:port/applications/celtix/hello_world_rpclit</literal></para>

          <para>From the
          <filename>celtix/samples/hello_world_RPCLit</filename> directory,
          run the client with the command:</para>

          <para><userinput>java
          -Djava.util.logging.config.file=%CELTIX_HOME%\etc\logging.properties
          demo.hwRPCLit.client.Client
          http://localhost:8080/applications/celtix/hello_world_rpclit</userinput></para>

          <para>Access the hello_world Web service using the URL:
          <literal>http://hostname:port/applications/celtix/hello_world</literal></para>

          <para>From the <filename>celtix/samples/hello_world</filename>
          directory, run the client with the command:</para>

          <para><userinput>java
          -Djava.util.logging.config.file=%CELTIX_HOME%\etc\logging.properties
          demo.hw.client.Client
          http://localhost:8080/applications/celtix/hello_world</userinput></para>
        </step>
      </procedure>
    </sect2>

    <sect2 id="tomcat_install">
      <title>Installing Tomcat</title>

      <para>Since CeltiXfire requires the Java 2 Standard Edition, v5.0 or
      later, it is essential that you use a version of Tomcat that is
      compatible with this version of Java. Tomcat v5.5.x is the proper choice
      and may be downloaded from the Apache Software Foundation site at <ulink
      url="http://tomcat.apache.org/download-55.cgi">http://tomcat.apache.org/download-55.cgi</ulink>.</para>

      <para>For Windows, an executable installer is available. Alternatively
      Windows users can download a <filename>.zip</filename> file and
      UNIX/Linux users can download a <filename>.tar.gz</filename> file. If
      you download one of the archive files, you can simply extract the file
      to a convenient location. If you downloaded the Windows executable,
      double click on its icon to run the installation program. Windows users
      will generally find the executable installer more convenient to use as
      it eliminates a number of environment and batch files and sets up some
      management applications and Start menu items that you may find
      useful.</para>

      <para>Once you have completed the installation, you must be certain that
      the environment is properly set before you try to launch Tomcat. If you
      installed Tomcat from one of the archives, then you must set two
      environment variables. Open a command window and issue the following
      commands:</para>

      <para><userinput>set JAVA_HOME=C:\j2sdk5.0</userinput></para>

      <para><userinput>set
      CATALINA_HOME=C:\apache-tomcat-<replaceable>[version]</replaceable></userinput></para>

      <para>If you installed Tomcat using the Windows installer, you only need
      to set one environment variable. Open a command window and issue the
      following commands:</para>

      <para><userinput>set JAVA_HOME=C:\j2sdk5.0</userinput></para>

      <para>Rather than setting these values explicitly in a command window,
      you may find it more convenient to set these variables through your
      global configuration.</para>

      <para>Once the environment has been set, start Tomcat. If you installed
      Tomcat using one of the archives, run the script
      <command>startup.bat</command> or <command>startup.sh</command>. If you
      installed Tomcat using the Windows installer, start the executable
      program <command>Tomcat5.exe</command>. Both the scripts and the
      executable are in the <filename>CATALINA_HOME/bin</filename>
      directory.</para>

      <para>By default, Tomcat is configured to use TCP/IP port 8080 to
      service requests. You can confirm that your Tomcat has been properly
      installed and configured by opening a Web browser and entering
      <userinput>http://localhost:8080</userinput> into the address text box.
      If everything is properly set, the browser will display a confirmatory
      page. If necessary, you can change any of the Tomcat TCP/IP ports used
      by editing the <filename>server.xml</filename> file, which is located in
      the <filename>CATALINA_HOME/conf</filename> directory.</para>
    </sect2>
  </sect1>
</article>