<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en-US">
<title>Using Celtix Management</title>
<sect1
><title>Overview</title>
<para>Celtix management features are implemented using the Java Management Extensions(JMX). These 
features include:</para>
<itemizedlist>
<listitem>
<para>instrumentation of key Celtix runtime components as JMX MBeans</para>
</listitem>
<listitem>
<para>support for dynamically exposing the MBeans of the Celtix runtime components</para>
</listitem>
<listitem>
<para>support for static registration of custom MBeans</para>
</listitem>
<listitem>
<para>support for dynamic registration of custom MBeans</para>
</listitem>
</itemizedlist>
<para>Once components of a Celtix-enabled application are exposed as MBeans they can be monitored 
and managed using any JMX compliant management console. They can also be monitored and managed 
using the JMXRemote APIs.</para>
</sect1>
<sect1 id="instrumented">
<title>Instrumented Celtix Components</title>
<para>The following Celtix runtime components are instrumented and can be exposed as JMX MBeans:</para>
<itemizedlist>
<listitem>
<para>
<ulink url="#bus">CeltixBus</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#workqueue">WorkQueue</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#wsdlmgr">WSDLManager</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#endpt">Endpoint</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#http">HTTPServerTransport</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#jms">JMSServerTransort</ulink>
</para>
</listitem>
</itemizedlist>
<para>The components are registered with the Celtix MbeanServer as Model Dynamic MBeans. They are 
named following the guidelines laid out in the JMX best practices document at 
<ulink url="http://java.sun.com/products/JavaManagement/best-practices.html">http://java.sun.com/products/JavaManagement/best-practices.html</ulink>. 
All Celtix runtime MBeans are registered using 
<literal>org.objectweb.celtix.instrumentation</literal> as their domain name. The remaining 
properties used to make up each MBean's ObjectName is made up of a combination of the bus name and 
other information from the service's WSDL contract.</para>
<para><xref linkend="Table1" /> lists the ObjectName for each of the instrumented Celtix components.</para>
<table id="Table1">
<title>Instrumented Celtix Component ObjectNames</title>
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Component</para>
</entry>
<entry>
<para>Properties</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>CeltixBus</para>
</entry>
<entry>
<para><constant>type=Bus,name=</constant><replaceable>busName</replaceable></para>
</entry>
</row>
<row>
<entry>
<para>WorkQueue</para>
</entry>
<entry>
<para><constant>type=Bus.WorkQueue,Bus=</constant><replaceable>busName</replaceable>
<constant>,name=WorkQueue</constant></para>
</entry>
</row>
<row>
<entry>
<para>WSDLManager</para>
</entry>
<entry>
<para><constant>type=Bus.WSDLManager,Bus=</constant><replaceable>busName</replaceable>
<constant>,name=WSDLManager</constant></para>
</entry>
</row>
<row>
<entry>
<para>Endpoint</para>
</entry>
<entry>
<para><constant>type=Bus.Endpoint,Bus=</constant><replaceable>busName</replaceable>
<constant>,Bus.Service=</constant><replaceable>WSDLServiceQName</replaceable>
<constant>,Bus.Port=</constant><replaceable>WSDLPort</replaceable><constant>,name=Endpoint</constant></para>
</entry>
</row>
<row>
<entry>
<para>HTTP Server Transport</para>
</entry>
<entry>
<para><constant>type=Bus.Service.Port.HTTPServerTransport,Bus=</constant>
<replaceable>busName</replaceable><constant>,Bus.Service=</constant>
<replaceable>WSDLServiceQName</replaceable><constant>,Bus.Port=</constant>
<replaceable>WSDLPort</replaceable><constant>,name=HTTPServerTransport</constant></para>
</entry>
</row>
<row>
<entry>
<para>JMS Server Transport</para>
</entry>
<entry>
<para><constant>type=Bus.Service.Port.JMSServerTransport,Bus=</constant>
<replaceable>busName</replaceable><constant>,Bus.Service=</constant>
<replaceable>WSDLServiceQName</replaceable><constant>,Bus.Port=</constant>
<replaceable>WSDLPort</replaceable><constant>,name=JMSServerTransport</constant></para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>For example, the MBean for the Endpoint component corresponding to the 
<sgmltag class="element">port</sgmltag> element <literal>SOAPPort</literal> shown in 
<xref linkend="example1" /> 
would have the ObjectName:</para>
<programlisting>org.objectweb.celtix.instrumentation:type=Bus.Endpoint,Bus=hello_bus,Bus.Service={http://obejectweb.org/hello_world}SOAPService,
Bus.Port=SoapPort,name=Endpoint</programlisting>
<example id="example1">
<title>Definition for a  Managed Endpoint</title>
<programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;wsdl:definitions name="HelloWorld" targetNamespace="http://objectweb.org/hello_world" 
    xmlns="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
    xmlns:tns="http://objectweb.org/hello_world"
    xmlns:x1="http://objectweb.org/hello_world/types"
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
...
    &lt;wsdl:service name="SOAPService"&gt;
        &lt;wsdl:port binding="tns:Greeter_SOAPBinding" name="SoapPort"&gt;
            &lt;soap:address location="http://localhost:9000/SoapContext/SoapPort"/&gt;
        &lt;/wsdl:port&gt;
    &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;</programlisting>
</example>
<sect2 id="bus">
<title>CeltixBus</title>
<para>The CeltixBus component is responsible for loading and managing the transports and bindings 
in use by a Celtix-enabled application. It also manages the flow of messages between the network 
and the WorkQueue that is responsible for processing the message.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table2" /> lists the managed attributes for the CeltixBus component.</para>
<table id="Table2">
<title>Managed Attributes for the CelixBus Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>Name</entry>
<entry>Description</entry>
<entry>Type</entry>
<entry>Read/Write</entry>
</row>
</thead>
<tbody>
<row>
<entry>TransportFactories</entry>
<entry>
Specifies the list of all transport factories loaded by the bus instance.
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>R</entry>
</row>
<row>
<entry>BindingFactories</entry>
<entry>
Specifies a list of all binding factories loaded by the bus instance.
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>R</entry>
</row>
<row>
<entry>ServiceMonitoring</entry>
<entry>
Specifies if transport performance monitoring is enabled.
</entry>
<entry>
<type>Boolean</type>
</entry>
<entry>RW</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2 id="workqueue">
<title>WorkQueue</title>
<para>The WorkQueue component manages the processing of messages by the servants implementing the 
service's business logic. It instantiates servants and passes data to and from them.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table3" /> lists the managed attributes for the WorkQueue component.</para>
<table id="Table3">
<title>Managed Attributes for the WorkQueue Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>Name</entry>
<entry>Description</entry>
<entry>Type</entry>
<entry>Read/Write</entry>
</row>
</thead>
<tbody>
<row>
<entry>ThreadingModel</entry>
<entry>
Specifies the threading model in use. Possible values are <constant>SINGLE_THREADED</constant> 
and <constant>MULTI_THREADED</constant>.
</entry>
<entry>
<type>String</type>
</entry>
<entry>R</entry>
</row>
<row>
<entry>WorkQueueSize</entry>
<entry>
Specifies the number of threads in the WorkQueue's thread pool.
</entry>
<entry>Integer</entry>
<entry>R</entry>
</row>
<row>
<entry>Empty</entry>
<entry>
Specifies if the WorkQueue is empty.
</entry>
<entry>Boolean</entry>
<entry>R</entry>
</row>
<row>
<entry>HighWaterMark</entry>
<entry>
Specifies the maximum threads available to the WorkQueue's thread pool.
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>RW</entry>
</row>
<row>
<entry>LowWaterMark</entry>
<entry>
Specifies the minimum number of threads available in the WorkQueue's thread pool.
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>RW</entry>
</row>
<row>
<entry>Full</entry>
<entry>
Specifies if the WorkQueue is full.
</entry>
<entry>
<type>Boolean</type>
</entry>
<entry>R</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2 id="wsdlmgr">
<title>WSDLManager</title>
<para>The WSDLManager component provides a WSDL registry and a numer of methods to retrieve WSDL.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table4" /> lists the managed attributes for the WSDLManager component.</para>
<table id="Table4">
<title>Managed Attributes for the WSDLManager Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Type</para>
</entry>
<entry>
<para>Read/Write</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>Services</para>
</entry>
<entry>
<para>Specifies the list of service elements loaded by the WSDL manager. The service elements are 
identified by their QName.</para>
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>Ports</para>
</entry>
<entry>
<para>Specifies the list of port elements loaded by the WSDL Manager. The port elements are 
identified by the value of their name attribute.</para>
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>Bindings</para>
</entry>
<entry>
<para>Specifies the list of binding elements loaded by the WSDL manager. The binding elements are 
identified by the value of their <sgmltag class="attribute">name</sgmltag> attribute.</para>
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
<sect3>
<title>Operations</title>
<para><xref linkend="Table5" /> lists the operations supported by the WSDLManager component.</para>
<table id="Table5">
<title>Operations Supported by the WSDLManager Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Parameters</para>
</entry>
<entry>
<para>Return Type</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>GetOperation</para>
</entry>
<entry>
<para>Returns the list of <sgmltag class="element">operation</sgmltag> elements for a given 
endpoint. The <sgmltag class="element">operation</sgmltag> elements are identified by the value of 
their <sgmltag class="attribute">name</sgmltag> attribute.</para>
</entry>
<entry>
<para><parameter>serviceQName</parameter></para>
<para><parameter>portTypeName</parameter></para>
</entry>
<entry>
<type>String[]</type>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2>
<title>Endpoint</title>
<para>The Endpoint component represents an endpoint running inside of the Celtix runtime. It 
allows you to monitor and control the state of an endpoint based on its service name and port name.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table6" /> lists the managed attributes for the Endpoint component.</para>
<table id="Table6">
<title>Managed Attributes for the Endpoint Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Type</para>
</entry>
<entry>
<para>Read/Write</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>ServiceName</para>
</entry>
<entry>
<para>Specifies the service QName implemented by the endpoint.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>PortName</para>
</entry>
<entry>
<para>Specifies the <sgmltag class="element">port</sgmltag> element used to register the endpoint. 
The <sgmltag class="element">port</sgmltag> element is identified by the value of its 
<sgmltag class="attribute">name</sgmltag> attribute.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>HandlerChains</para>
</entry>
<entry>
<para>Specifies the list of <classname>MassageHandler</classname> objects used by the endpoint. 
The objects are identified by their class name.</para>
</entry>
<entry>
<type>String[]</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>State</para>
</entry>
<entry>
<para>Specifies the state of the service. Possible values are ...</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
<sect3>
<title>Operations</title>
<para><xref linkend="Table7" /> lists the operations provided by the Endpoint component.</para>
<table id="Table7">
<title>Operations Provided by the Endpoint Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Parameters</para>
</entry>
<entry>
<para>Return Type</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>start</para>
</entry>
<entry>
<para>Activates the endpoint to accept requests.</para>
</entry>
<entry>
<parameter>None</parameter>
</entry>
<entry>
<type>Void</type>
</entry>
</row>
<row>
<entry>
<para>stop</para>
</entry>
<entry>
<para>Deactivates the endpoint.</para>
</entry>
<entry>
<parameter>None</parameter>
</entry>
<entry>
<type>Void</type>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2 id="http">
<title>HTTPServerTransport</title>
<para>The HTTPServerTransport component is created when the Endpoint component receives an HTTP 
address to instantiate. It provides a logical view of the HTTP transport for the service side.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table8" /> lists the managed attributes for the HTTPServerTransport component.</para>
<table id="Table8">
<title>\Managed Attributes for the HTTPServerTransport Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Type</para>
</entry>
<entry>
<para>Read/Write</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>ServiceName</para>
</entry>
<entry>
<para>Specifies the QName of the service using this instance of the HTTP server transport.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>PortName</para>
</entry>
<entry>
<para>Specifies the <sgmltag class="element">port</sgmltag> element of the endpoint using this 
instance of the HTTP server tranport. The <sgmltag class="element">port</sgmltag> element is 
identified by the value of its <sgmltag class="attribute">name</sgmltag> attribute.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>URL</para>
</entry>
<entry>
<para>Specifies the URL to which this instance of the HTTP server transport listens.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>TotalError</para>
</entry>
<entry>
<para>Species the number of request processing errors handled by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>RequestTotal</para>
</entry>
<entry>
<para>Specifies the number of requests received by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>RequestOneWay</para>
</entry>
<entry>
<para>Specifies the number of oneway requests received by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
<sect2 id="jms">
<title>JMSServerTransport</title>
<para>The JMSServerTransport component is created when the Endpoint receives a JMS address to 
instantiate. It provides a logical view of the JMS transport for the service side.</para>
<sect3>
<title>Attributes</title>
<para><xref linkend="Table9" /> lists the managed attributes for the JMSServerTransport component.</para>
<table id="Table9">
<title>Managed Attributes for the JMSServerTransport Component</title>
<tgroup cols="4">
<thead>
<row>
<entry>
<para>Name</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Type</para>
</entry>
<entry>
<para>Read/Write</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>ServiceName</para>
</entry>
<entry>
<para>Specifies the QName of the service using this instance of the JMS server transport.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>PortName</para>
</entry>
<entry>
<para>Specifies the <sgmltag class="element">port</sgmltag> element of the endpoint using this 
instance of the JMS server tranport. The <sgmltag class="element">port</sgmltag> element is 
identified by the value of its <sgmltag class="attribute">name</sgmltag> attribute.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>URL</para>
</entry>
<entry>
<para>Specifies the URL to which this instance of the HTTP server transport listens.</para>
</entry>
<entry>
<type>String</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>TotalError</para>
</entry>
<entry>
<para>Species the number of request processing errors handled by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>RequestTotal</para>
</entry>
<entry>
<para>Specifies the number of requests received by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
<row>
<entry>
<para>RequestOneWay</para>
</entry>
<entry>
<para>Specifies the number of oneway requests received by this endpoint.</para>
</entry>
<entry>
<type>Integer</type>
</entry>
<entry>
<para>R</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Adding Instrumentation to a Celtix-enabled Application</title>
<para>Celtix supports the creation and registration of custom MBeans inside of Celtix-enabled 
applications. A service developer can create one or more MBeans to instrument their service. These 
custom MBeans can then be registered with the Celtix MBean server. This makes it possible to 
manage a service using the same interface as the Celtix runtime components.</para>
<para>There are two ways to add custom instrumentation to a Celtix-enabled application:</para>
<itemizedlist>
<listitem>
<para>
<ulink url="#jmx">implement one of the JMX MBean interfaces and register it with the Celtix 
MBeanServer</ulink>
</para>
</listitem>
<listitem>
<para>
<ulink url="#celtix">implement the Celtix <classname>Instrumentation</classname> interface</ulink>
</para>
</listitem>
</itemizedlist>
<para>Functionally, there is no difference between the two approaches. You can base your decision 
on the ease of development, maintainability, and portability.</para>
<sect2 id="jmx">
<title>Using the JMX MBean Interfaces</title>
<para>The Celtix MBean server can be accessed through the Celtix bus and allows for the 
registration of user developed MBeans. This allows you to instrument your service implementation 
by developing a custom MBean using one of the JMX MBean interfaces and registering it with the 
Celtix MBean server. Your custom instrumentation will then be accessible through the same JMX 
connection as the Celtix internal components used by your service.</para>
<sect3>
<title>Creating your custom MBean</title>
<para>When you use the JMX APIs to instrument your service implementation, you follow the design 
methodology laid out by the JMX specification. This involves the following steps:</para>
<procedure>
<step>
<para>Decide what type of MBean you wish to use.</para>
<itemizedlist>
<listitem>
<para>Standard MBeans expose a management interface that is defined at development time.</para>
</listitem>
<listitem>
<para>Dynamic MBeans expose their management interface at run time.</para>
</listitem>
</itemizedlist>
</step>
<step>
<para>Create the MBean interface to expose the properties and operations used to manager your 
service implementation.</para>
<itemizedlist>
<listitem>
<para>Standard MBeans use the <classname>MBean</classname> inteface.</para>
</listitem>
<listitem>
<para>Dynamic MBeans use the <classname>DynamicMBean</classname> interface.</para>
</listitem>
</itemizedlist>
</step>
<step>
<para>Implement the MBean class.</para>
</step>
</procedure>
<para>Example 2 shows the interface for a standard MBean.</para>
<para>Example 3 shows the class that implements the MBean defined in Example 2.</para>
</sect3>
<sect3>
<title>Registering the MBean</title>
<para>For your MBean to be exposed to a management console, it must be registered with the Celtix 
MBean server. The Celtix MBean server is accessible through the bus. Typically, this will be done 
when your service is initialized.</para>
<para>To register a custom MBean do the following:</para>
<procedure>
<step>
<para>Instantiate your custom MBean.</para>
</step>
<step>
<para>Get an instance of the the bus using <methodname>Bus.getCurrent()</methodname>.</para>
</step>
<step>
<para>Get the Celtix MBean server from the bus using 
<methodname>bus.getInstrumentationManager().getMBeanServer()</methodname>.</para>
</step>
<step>
<para>Create an ObjectName for your MBean.</para>
<note>
<para>It is recommended that you follow the naming conventions suggested in 
<xref linkend="instrumented" />. However, you can choose any naming scheme you desire.</para>
</note>
</step>
<step>
<para>Register your MBean server using the server’s <methodname>registerMBean()</methodname> method.</para>
</step>
</procedure>
<para>Example 4 shows code for registering a custom MBean with the Cetlix MBean server.</para>
</sect3>
</sect2>
<sect2 id="celtix">
<title>Using the Celtix Instrumentation Interface</title>
<para>If you don not want to use the JMX APIs to add instrumentation to your service, you can use 
the Celtix <classname>Instrumentation</classname> interface. This interface wraps the JMX 
subsystem in a Celtix specific API. You do not need to access the Celtix MBean server to register 
your Instrumentation because the Celtix wrappers handle it all for you.</para>
<note>
<para>You will, however, be responsible for cleaning up all instances of your custom instrumentation.</para>
</note>
<para>To add custom instrumentation using the Instrumentation interface do the following:</para>
<procedure>
<step>
<para>
<ulink url="#writeclass">Write</ulink> an instrumentation class that implements the 
<classname>org.objectweb.celtix.Instrumentation</classname> interface.</para>
</step>
<step>
<para>When your service is starting up, <ulink url="#activate">activate</ulink> your 
instrumentation object by instantiating it and registering it with the bus.</para>
</step>
<step>
<para>When your service is shutting down, <ulink url="#deactivate">deactivate</ulink> your 
instrumentation by unregistering it and cleaning it up.</para>
</step>
</procedure>
<sect3 id="writeclass">
<title>Implementing the Instrumentation Class</title>
<para>Like an MBean a Celtix instrumentation class is responsible for providing access to the 
attributes you want to track and implement any management operations you want to expose. Unlike an 
MBean a Celtix instrumentation class does not implement a user defined interface. Instead, a 
Celtix instrumentation class implements a Celtix defined interface, 
<classname>Instrumentation</classname>, and defines the operations required to expose the 
attributes and operations you desire.</para>
<para>The Celtix management facilities use JDK 5.0 annotations to create a 
<classname>MBeanInfoAssembler</classname>. The <classname>MBeanInfoAssember</classname> reads the 
Celtix provided annotations to identify the attributes and operations that are to be exposed. It 
then uses the information to create a ModelMBean that is registered with the Celix MBean server.</para>
<para><xref linkend="Table10" /> lists the JDK 5.0 annotations used when implementing your 
instrumentation class.</para>
<table id="Table10">
<title>Celtix JMX Annotations</title>
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Purpose</para>
</entry>
<entry>
<para>JDK 5.0 Annotation</para>
</entry>
<entry>
<para>Attribute / Annotation Type</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>Mark all instances of a class as a JMX managed resource</para>
</entry>
<entry>
<para>@ManagedResource</para>
</entry>
<entry>
<para>Class</para>
</entry>
</row>
<row>
<entry>
<para>Mark a method as a JMX operation</para>
</entry>
<entry>
<para>@ManagedOperation</para>
</entry>
<entry>
<para>Method</para>
</entry>
</row>
<row>
<entry>
<para>Mark a getter or a setter as one half of a JMX attribute</para>
</entry>
<entry>
<para>@ManagedAttribute</para>
</entry>
<entry>
<para>Method</para>
</entry>
</row>
<row>
<entry>
<para>Describe the parameters of a managed operation</para>
</entry>
<entry>
<para>@ManagedOperationParameter</para>
<para>@ManagedOperationParameters</para>
</entry>
<entry>
<para>Method</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para><xref linkend="Table11" /> lists the metadata that can be provided along with the Celtix JMX 
annotations.</para>
<table id="Table11">
<title>Celtix JMX Annotations Metadata</title>
<tgroup cols="3">
<thead>
<row>
<entry>
<para>Parameter</para>
</entry>
<entry>
<para>Description</para>
</entry>
<entry>
<para>Annotation</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<parameter>componentName</parameter>
</entry>
<entry>
<para>Specifies the name of the managed respurce.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>description</parameter>
</entry>
<entry>
<para>Specifies a user-friendly description of the resource, attribute, or operation.</para>
</entry>
<entry>
<para>ManagedResource</para>
<para>ManagedAttribute</para>
<para>ManagedOperation</para>
<para>ManagedOperationParameter</para>
</entry>
</row>
<row>
<entry>
<parameter>currencyTimeLimit</parameter>
</entry>
<entry>
<para>Specifies the value of the currencyTimeLimt descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
<para>ManagedAttribute</para>
</entry>
</row>
<row>
<entry>
<parameter>defaultValue</parameter>
</entry>
<entry>
<para>Specifies the value of the defaultValue descriptor field.</para>
</entry>
<entry>
<para>ManagedAttribute</para>
</entry>
</row>
<row>
<entry>
<parameter>log</parameter>
</entry>
<entry>
<para>Specifies the value of the log descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>logFile</parameter>
</entry>
<entry>
<para>Specifies the value of the logFile descriptor field.</para>
</entry>
<entry>
<parameter>ManagedResource</parameter>
</entry>
</row>
<row>
<entry>
<parameter>persistPolicy</parameter>
</entry>
<entry>
<para>Specifies the value of the persistPolicy descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>persistPeriod</parameter>
</entry>
<entry>
<para>Specifies the value of the persistPeriod descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>persistLocation</parameter>
</entry>
<entry>
<para>Specifies the value of the persistLocation descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>persistName</parameter>
</entry>
<entry>
<para>Specifies the value of the persistName descriptor field.</para>
</entry>
<entry>
<para>ManagedResource</para>
</entry>
</row>
<row>
<entry>
<parameter>name</parameter>
</entry>
<entry>
<para>Specifies the display name of an operation parameter.</para>
</entry>
<entry>
<para>ManagedOperationParameter</para>
</entry>
</row>
<row>
<entry>
<parameter>index</parameter>
</entry>
<entry>
<para>Specifies the index of an operation parameter.</para>
</entry>
<entry>
<para>ManagedOperationParameter</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>When you are implementing your custom instrumentation class, you should annotate the class 
with the ManagedResource attribute. Any management operation you wish to expose within the 
instrumentation class should be annotated with the ManagedOperation attribute. For attributes you 
wish to expose, you will should annotate their getter and setter methods with the ManagedAttribute 
attribute. If you want to make an attribute read-only or write-only, you can omit the annotation 
from either its setter method or its getter method.</para>
<para>Example 5 shows a Celtix instrumentation class.</para>
</sect3>
<sect3 id="activate">
<title>Activating your custom instrumentation</title>
<para>To make your custom instrumentation available to management consoles you must create an 
instance of your instrumentation class and register it with the bus. The handles the creation of 
the ModelMBean to represent your instrumentation. It also handles the registration of the MBean 
with the MBean server.</para>
<para>To activate your custom instrumentation do the following:</para>
<procedure>
<step>
<para>Create an instance of your instrumentation class.</para>
</step>
<step>
<para>Get the current bus instance.</para>
</step>
<step>
<para>Get the <classname>InstrumentationManager</classname> from the bus.</para>
</step>
<step>
<para>Register your instrumentation instance with the 
<classname>InstrumentationManager</classname>.</para>
</step>
</procedure>
<para>Example 6 shows code for activating your custom instrumentation.</para>
</sect3>
<sect3 id="deactivate">
<title>Deactivating your custom instrumentation</title>
<para>Unlike MBeans created using the JMX APIs, Celtix instrumentation classes must be cleaned up. 
You must explicitly tell the bus to remove the ModelMBean created for your instrumentation using 
the <methodname>InstrumentationManager.unregister()</methodname> method. This method removes the 
MBean from the Celtix MBean server, destroys the associated ModelMBean, and frees up any resources 
used by it.</para>
<para>Example 7 shows code for deactivating your custom instrumentation.</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Configuring Celtix Management Features</title>
<para>The Celtix management configuration is specified using the 
<classname>org.objectweb.celtix.bus.instrumentation.instrumentation_config.spring.InstrumentationConfigBean</classname> 
class. This class consists of two properties:</para>
<itemizedlist>
<listitem>
<para>
<ulink url="#instrumentcontrol">im:instrumentationControl</ulink> configures the instrumentation 
event listener that collects the JMX provided data.</para>
</listitem>
<listitem>
<para>
<ulink url="#mbserver">im:MBServer</ulink> configures the JMXConnectorServer that runs the Celtix 
MBean server.</para>
</listitem>
</itemizedlist>
<para>In order to use the management configuration you are must specify the namespace under which 
the Celtix management configuration properties are defined. You do this by adding the line shown 
below to the beans element of your configuration file.</para>
<programlisting>xmlns:im="http://celtix.objectweb.org/bus/instrumentation"</programlisting>
<sect2 id="instrumentcontrol">
<title>Configuring the instrumentation event listeners</title>
<para><xref linkend="Table12" /> lists the values for the im:instrumentationControl property.</para>
<table id="Table12">
<title>instrumentationControl Values</title>
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Value</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>InstrumentationEnable</para>
</entry>
<entry>
<para>Specifies if the Celtix runtime's instrumentation created and removed events are enabled or 
disabled.</para>
</entry>
</row>
<row>
<entry>
<para>JMXEnable</para>
</entry>
<entry>
<para>Specifies if the Celtix JMX MBean register and unregister events are enabled or disabled.</para>
</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
<sect2 id="mbserver">
<title>Configuring the MBean server</title>
<para><xref linkend="Table13" /> lists the values for the im:MBServer property.</para>
<table id="Table13">
<title>MBServer Values</title>
<tgroup cols="2">
<thead>
<row>
<entry>
<para>Value</para>
</entry>
<entry>
<para>Description</para>
</entry>
</row>
</thead>
<tbody>
<row>
<entry>
<para>JMXConnector</para>
</entry>
<entry>
<para>Specifies how to set up the JMXConnectorServer which provides the remote connection to a 
JMXServer. This value has three sub-values:</para>
<itemizedlist>
<listitem>
<para>Threaded specifies specifies if the JMXConnectorServer can run in a new thread. The default 
value is <constant>false</constant>.</para>
</listitem>
<listitem>
<para>Daemon specifies if the thread created for the JMXConnectorServer runs in Daemon mode. The 
default value is <constant>true</constant>.</para>
<note>
<para>This is only applicable if Threaded is set to true.</para>
</note>
</listitem>
<listitem>
<para>JMXServiceURL specifies the JMXServiceURL used for remote access through the JMX Remote API. 
For more information see the 
<ulink url="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/remote/rmi/package-summary.html">JMX 
remote.rmi package documentation</ulink>.</para>
</listitem>
</itemizedlist>
</entry>
</row>
</tbody>
</tgroup>
</table>
<para>For more information on configuring Celtix see the 
<ulink url="site:config">Celtix Configuration Guide</ulink>.</para>
</sect2>
</sect1>
<sect1>
<title>Accessing Celtix MBeans from a Management Console</title>
<para>Celtix runtime MBeans can be accessed remotely using JMXRemote. This means that 
any management console that supports JMXRemote can be used to monitor and manage Celtix-enabled 
applications.</para>
<para>As a starting point, JDK 1.5 provides a lightweight JMX console called jconsole. To view the 
management information for a deployed Celtix-enabled application using jconsole do the following:</para>
<procedure>
<step>
<para>Launch the jconsole application using the command 
<userinput>JDK_HOME/bin/jconsole</userinput>.</para>
</step>
<step>
<para>Select the <guibutton>Advanced</guibutton> tab.</para>
</step>
<step>
<para>Enter the URL of your Celtix MBean server in the <guilabel>JMXServiceURL</guilabel> field.</para>
</step>
</procedure>
<para>The URL of your Celtix MBean server will either be the default Celtix JMXServiceURL or the 
value specified by the JMXServiceURL property in your application configuration.</para>
</sect1>
</article>