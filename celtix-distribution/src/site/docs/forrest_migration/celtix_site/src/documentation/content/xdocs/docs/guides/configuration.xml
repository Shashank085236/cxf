<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en-US">
  <title>Using Celtix Configuration</title>

  <sect1>
    <title>Overview</title>

    <para>This document describes how to write and use a Celtix configuration
    file.</para>

    <para>A Celtix configuration file is a Spring Framework XMLBeanFactory
    configuration file (see <ulink
    url="http://www.springframework.org/docs/reference/beans.html#beans-factory">http://www.springframework.org/docs/reference/beans.html#beans-factory</ulink>
    and <ulink url="http://www.springframework.org/">http://www.springframework.org/</ulink>).
    However, other than learning how to write the configuration file, you do
    not need to know anything about the Spring Framework or its APIs.</para>

    <para><xref linkend="fig_1" /> shows the hierarchical organization of
    configurable components in Celtix. The shaded components can be configured
    using a Celtix configuration file. In a client application, configuration
    settings may be applied at the level of a service (to all invocations
    using a specific proxy instance), a port, or a transport. In a server
    application, configuration settings may be applied at the level of an
    endpoint (to all invocations against a specific service) or
    transport.</para>

    <figure id="fig_1">
      <title>Celtix Configuration Hierarchy</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="images/configuration.gif" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Later in this document, you will see how an understanding of this
    hierarchy is used to identify the component to which a collection of
    configuration settings apply.</para>

    <para>Celtix also has some fully implemented services (for example, the
    routing service) that require configuration. These services are also
    configured using the approach described in this document. However, in a
    configuration file used by a Celtix service, the identity of the
    configurable component is not derived from the configuration hierarchy
    illustrated in <xref linkend="fig_1" />.</para>

    <para>This document is based on the Celtix 1.0 General Availability
    release (April 2006); there may be revisions in interim builds and
    subsequent releases. It is essential that you refer to the metadata XML
    and schema files that are packaged with your installation, see The Celtix
    Metadata XML Files, when writing or editing Celtix configuration
    files.</para>

    <para>Refer to the Celtix configuration Wiki page for the most current
    description of this functionality. This page is located at: (<ulink
    url="https://wiki.objectweb.org/celtix/Wiki.jsp?page=ConfigurationDocumentation">https://wiki.objectweb.org/celtix/Wiki.jsp?page=ConfigurationDocumentation</ulink>).</para>
  </sect1>

  <sect1>
    <title>Structure of a Celtix Configuration File</title>

    <para>A Celtix configuration file has the syntax shown in the following
    fragment:</para>
      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE beans SYSTEM "http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;
&lt;beans xmlns:...&gt;
  &lt;bean id="..." abstract="true"&gt;
    &lt;property name="..."&gt;
      &lt;value&gt;
      ...
      &lt;/value&gt;
    &lt;/property&gt;
  &lt;/bean&gt;

  &lt;bean id="..." class="..." parent="..."&gt;
    &lt;property name="..."&gt;
      &lt;value&gt;
      ...
      &lt;/value&gt;
    &lt;/property&gt;
  &lt;/bean&gt;

  &lt;bean id="..." class="..."&gt;
    &lt;property name="..."&gt;
      &lt;value&gt;
      ...
      &lt;/value&gt;
    &lt;/property&gt;
  &lt;/bean&gt;
&lt;/beans&gt;
</programlisting>

    <para>With the exception of the URL listed in the <classname>DOCTYPE</classname> declaration,
    this syntax derives directly from the Spring Framework XMLBeanFactory
    configuration file. Starting from this basic framework, your task is to
    fill in the entries indicated by the ellipsis (...).</para>
<sect2>
    <title>Beans element</title>

    <para>In the opening beans element, you must include namespace
    declarations for the schema files that define acceptable configuration
    entries. The file may then include one, or more, bean elements, each of
    which corresponds to a configurable component in Celtix.</para>
</sect2>
<sect2>
    <title>Bean element</title>

    <para>The example file in this section shows three ways of specifying a
    <classname>bean</classname> element. The first approach is used to define an abstract
    configuration, which is a configuration that is reused in another bean
    element. Because this declaration only describes configuration entries
    that are reused in another declaration, there is no corresponding class
    entry. The second approach is used to define a bean that reuses the
    configuration entries defined in an abstract bean element. The value of
    the parent attribute is the id of the abstract <classname>&lt;bean&gt;</classname>. And the third
    approach is used to completely define a bean.</para>
<sect3>
    <title>Id attribute</title>

    <para>The <classname>id</classname> attribute represents the component to which the configuration
    is applied, for example, a bus, a service, a port, a transport, or a
    Celtix service. The value you supply for the <classname>id</classname> attribute generally
    includes a bus identifier and the name of the service, or the service and
    port, to which the configuration applies, that is, the value of the <classname>id</classname>
    attribute is derived from the configuration hierarchy. However, the id
    value is nothing more than a unique string, so there are exceptions to
    this rule (for example, configuration entries for the Celtix routing
    service). The class attribute provides the class name of a bean in the
    Spring Framework infrastructure that is responsible for managing the
    configuration entries.</para>
    <para>Specifying values for the id attribute and the class attribute is
    fairly straight-forward. The information needed to create an id that
    indicates the configurable component can be derived from the WSDL file for
    the service (although the id can be any unique string), whereas the
    information needed to create the class name is derived from the namespace
    URI of the metadata XML file that defines acceptable configuration entries
    for the component being configured.</para>
</sect3>
</sect2>
<sect2>
    <title>Property element</title>

    <para>The <classname>property</classname> element corresponds to a configurable variable,
    identified by a <classname>name</classname> attribute, and the content within the <classname>value</classname>
    element is the value for that configuration entry.</para>

    <para>To complete the information in the <classname>property</classname> element and the 
	<classname>value</classname> elements, you need to use the types that are defined in several schema and
    metadata XML files, which are described in the next section.</para>
</sect2>
  </sect1>
  <sect1>
    <title>The Celtix Metadata XML Files</title>

    <para>For each configurable component, Celtix provides an XML file that
    contains the metadata needed to identify and set a configuration variable,
    and a schema file that defines types typically used in configuration
    entries. In both the Celtix binary and source distributions, copies of
    these files exist in the <filename>celtix.jar</filename> file, located in the <filename>CELTIX_HOME/lib</filename>
    and <filename>CELTIX_HOME/resources</filename> directories.</para>

    <para>When you are writing a Celtix configuration file, you must refer to
    the copies of these files that ship with your product to be certain that
    you have correctly specified each element. The best place to start is with
    an existing configuration file, which you can modify to suit the
    requirements of your application. If you need to define another
    configuration entry, first use the metadata XML file to determine the name
    and content of the property element, and then use a schema file to
    determine the content of the value element.</para>

    <para>The content of each of the Celtix XML metadata files adheres to the
    structure defined in the following schema file:</para>

    <para><filename>resources/schemas/configuration/metadata.xsd</filename></para>

    <para>Each <classname>configItem</classname> element represents a configurable variable
    for the component.</para>

    <para>The Celtix XML metadata files are as follows:</para>
<sect2>
    <title>bus-config.xml</title>

    <para><filename>resources/config-metadata/bus-config.xml</filename> defines the
    metadata for configuring the bus component. This file describes the
    following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para><classname>bindingFactories</classname></para>
      </listitem>

      <listitem>
        <para><classname>transportFactories</classname></para>
      </listitem>

      <listitem>
        <para><classname>resourceResolvers</classname></para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is: <classname>http://celtix.objectweb.org/bus/bus-config</classname>. When
    writing a configuration file that includes Bus related configuration
    entries, the value of the class attribute in the bean element is derived
    from the following namespace declaration:
    <classname>org.objectweb.celtix.bus.bus_config.spring.BusConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>endpoint-config.xml</title>

    <para><filename>resources/config-metadata/endpoint-config.xml</filename> defines the
    metadata for configuring the endpoint (server) component. This file
    describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para><classname>handlerChain</classname></para>
      </listitem>

      <listitem>
        <para><classname>systemHandlerChain</classname></para>
      </listitem>

      <listitem>
        <para><classname>serverContextInspectors</classname></para>
      </listitem>

      <listitem>
        <para><classname>enableSchemaValidation</classname></para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is <classname>http://celtix.objectweb.org/bus/jaxws/endpoint-config</classname>.
    When writing a configuration file that includes endpoint related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.jaxws.endpoint_config.spring.EndpointConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>http-client-config.xml</title>

    <para><filename>resources/config-metadata/http-client-config.xml</filename> defines
    the metadata for configuring the service (client) HTTP transport. This
    file describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para><classname>httpClient</classname></para>
      </listitem>

      <listitem>
        <para><classname>authorization</classname></para>
      </listitem>

      <listitem>
        <para><classname>proxyAuthorization</classname></para>
      </listitem>

      <listitem>
        <para><classname>ssl</classname></para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is: <classname>http://celtix.objectweb.org/bus/transports/http/http-client-config</classname>.
    When writing a configuration file that includes http client related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.transports.http.http_client_config.spring.HttpClientConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>http-listener-config.xml</title>

    <para><filename>resources/config-metadata/http-listener-config.xml</filename> defines
    the metadata for configuring an HTTP transport listener. This file
    describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para><classname>httpListener</classname></para>
      </listitem>

      <listitem>
        <para><classname>ssl</classname></para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is: <classname>http://celtix.objectweb.org/bus/transports/http/http-listener-config</classname>.
    When writing a configuration file that includes http listener related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.transports.http.http_server_config.spring.HttpListenerConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>http-server-config.xml</title>

    <para>The resources/config-metadata/http-server-config.xml file defines
    the metadata for configuring the endpoint (server) HTTP transport. This
    file describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para>httpServer</para>
      </listitem>

      <listitem>
        <para>authorization</para>
      </listitem>

      <listitem>
        <para>ssl</para>
      </listitem>
    </orderedlist>

    <para>When writing a configuration file that includes http server related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.transports.http.http_server_config.spring.HttpServerConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>instrumentation-config.xml</title>

    <para>The resources/config-metadata/instrumentation-config.xml file
    defines the metadata for configuring instrumentation. This file describes
    the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para>InstrumentationControl</para>
      </listitem>

      <listitem>
        <para>MBServer</para>
      </listitem>
    </orderedlist>

    <para>When writing a configuration file that includes instrumentation
    related configuration entries, the value of the class attribute in the
    bean element is:
    <classname>org.objectweb.celtix.bus.instrumentation.spring.InstrumentationConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>jms-client-config.xml</title>

    <para>The <filename>resources/config-metadata/jms-client-config.xml</filename> file defines the
    metadata for configuring the service (client) JMS transport. This file
    describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para>jmsClient</para>
      </listitem>

      <listitem>
        <para>jmsAddress</para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is <classname>http://celtix.objectweb.org/bus/transports/jms/jms-client-config</classname>.
    When writing a configuration file that includes jms client related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.transports.jms.jms_client_config.spring.JmsClientConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>jms-server-config.xml</title>

    <para>The file resources/config-metadata/jms-server-config.xml defines the
    metadata for configuring the endpoint (server) JMS transport. This file
    describes the following configurable variables:</para>

    <para>jmsServer</para>

    <para>jmsAddress</para>

    <para>When writing a configuration file that includes jms server related
    configuration entries, the value of the class attribute in the
    &lt;bean&gt; element is:
    org.objectweb.celtix.bus.transports.jms.jms_server_config.spring.JmsServerConfigBean.</para>
</sect2>
<sect2>
    <title>port-config.xml</title>

    <para><filename>resources/config-metadata/port-config.xml</filename> defines the
    metadata for configuring the endpoint's port component. This file
    describes the following configurable variables:</para>

    <orderedlist>
      <listitem>
        <para>address</para>
      </listitem>

      <listitem>
        <para>bindingId</para>
      </listitem>

      <listitem>
        <para>transportId</para>
      </listitem>

      <listitem>
        <para>handlerChain</para>
      </listitem>

      <listitem>
        <para>systemHandlerChain</para>
      </listitem>

      <listitem>
        <para>enableSchemaValidataion.</para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is <classname>http://celtix.objectweb.org/bus/jaxws/port-config</classname>.
    When writing a configuration file that includes port related configuration
    entries, the value of the class attribute in the bean element is:
    <classname>org.objectweb.celtix.bus.jaxws.port_config.spring.PortConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>rm-config.xml</title>

    <para><filename>resources/config-metadata/rm-config.xml</filename> defines the
    metadata for configuring WS-Reliable Messaging (WS-RM). This file
    describes three configurable variables:</para>

    <orderedlist>
      <listitem>
        <para>rmAssertion</para>
      </listitem>

      <listitem>
        <para>sourcePolicies</para>
      </listitem>

      <listitem>
        <para>destinationPolicies.</para>
      </listitem>
    </orderedlist>

    <para>The namespace assigned to this file's content is: <classname>http://celtix.objectweb.org/bus/ws/rm/rm-config</classname>.
    When writing a configuration file that includes WS-RM related
    configuration entries, the value of the class attribute in the bean
    element is:
    <classname>org.objectweb.celtix.bus.ws.rm.rm_config.spring.RmConfigBean</classname>.</para>
</sect2>
<sect2>
    <title>router-config.xml</title>

    <para><filename>resources/config-metadata/router-config.xml</filename> defines the
    metadata for configuring the Celtix routing service. This file describes
    the routesWSDL configurable variable. The namespace assigned to this
    file's content is: <classname>http://celtix.objectweb.org/routing/configuration</classname>.
    When writing a configuration file that includes routing configuration
    entries, the value of the class attribute in the bean element is:
    <classname>org.objectweb.celtix.routing.configuration.spring.ConfigurationBean</classname>.</para>
</sect2>
<sect2>
    <title>service-config.xml</title>

    <para><filename>resources/config-metadata/service-config.xml</filename> is a
    placeholder for future service level configuration settings. It currently
    has no content.</para>
</sect2>
</sect1>

  <sect1>
    <title>The Celtix Schema Files</title>

    <para>Your starting point for specifying a configuration entry is the
    metadata XML file. This enables you to determine what configuration
    variables you can include, and identify which schema files contain the
    corresponding type information. Also, use the namespace declaration in the
    metadata XML file to determine the name of the Spring configuration bean
    corresponding to the component that you want to configure. Then refer to
    the schema file to discover the syntax and type of data you need to add to
    the configuration file. In some cases, you will need to refer to more than
    one schema file to complete your configuration entry. In this case, the
    metadata XML file will include namespace declarations for all of the
    associated schema files. The schema files are located in the following
    subdirectories:</para>

    <orderedlist>
      <listitem>
        <para>resources/schemas/configuration</para>
      </listitem>

      <listitem>
        <para>resources/schemas/wsdl</para>
      </listitem>
    </orderedlist>

    <para>A simple example using the Celtix routing service will help to
    illustrate.</para>

    <sect2>
      <title>Configuring the Routing Service</title>

      <para>Review the content of the router-config.xml metadata XML
      file:</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;cm:config</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:cm="http://celtix.objectweb.org/configuration/metadata"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:router-conf="http://celtix.objectweb.org/routing/configuration"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xs="http://www.w3.org/2001/XMLSchema"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;namespace="http://celtix.objectweb.org/routing/configuration"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;cm:configImport</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;namespace="http://celtix.objectweb.org/routing/configuration"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;location="schemas/wsdl/routing.xsd"/&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;cm:configItem&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cm:name&gt;routesWSDL&lt;/cm:name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cm:type&gt;router-conf:urlListPolicy&lt;/cm:type&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cm:description&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List of wsdl urls used by
      router</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/cm:description&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cm:lifecyclePolicy&gt;bus&lt;/cm:lifecyclePolicy&gt;</para>

      <para>&nbsp;&nbsp;&lt;/cm:configItem&gt;</para>

      <para>&lt;/cm:config&gt;</para>

      <para>You can extract the following information from this file
      (highlighted in the example XML):</para>

      <orderedlist>
        <listitem>
          <para>The namespace and location of the schema file(s) that define
          the types used to specify the configurable variables.</para>
        </listitem>

        <listitem>
          <para>The namespace assigned to the metadata XML file, which leads
          to the class name of the Spring configuration bean.</para>
        </listitem>

        <listitem>
          <para>The name and type of the configurable variable.</para>
        </listitem>
      </orderedlist>

      <para>Using this information, you can start writing the configuration
      file with the following content.</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM
      "http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para></para>

      <para>&lt;beans</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:router-conf="http://celtix.objectweb.org/routing/configuration"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;bean id="..."</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.routing.configuration.spring.ConfigurationBean"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;property name="routesWSDL"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>The value that you assign to the bean element's id attribute must
      be a unique string. Because this configuration file will be used by the
      Celtix routing service, and not specifically by one of the components
      identified in Illustration 1, you do not need to derive the id from the
      bus identifier. You can simply specify a string value instead.</para>

      <para>To complete the value element, you must refer to the associated
      schema file. The resources/schemas/wsdl/routing.xsd schema file is
      defined in the <classname>http://celtix.objectweb.org/routing/configuration</classname>
      namespace. This is the file you use to define the content of the value
      element.</para>

      <para>This schema file contains multiple type definitions. Most of these
      types are used in defining a route specification in a WSDL file, and do
      not relate to configuring the routing service. The wsdlUrl and
      urlListPolicy types (at the end of the file) are relevant to
      configuration.</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;xs:schema</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;...</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:r="http://celtix.objectweb.org/routing/configuration"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;targetNamespace="http://celtix.objectweb.org/routing/configuration"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;...</para>

      <para></para>

      <para>&nbsp;&nbsp;xs:element name="wsdlUrl"
      type="r:urlListPolicy"/&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;xs:complexType name="urlListPolicy"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:sequence&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="url"
      type="xs:string" maxOccurs="unbounded"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:sequence&gt;</para>

      <para>&nbsp;&nbsp;&lt;/xs:complexType&gt;</para>

      <para>&lt;/xs:schema&gt;</para>

      <para>In the router-config.xml metadata XML file, the type for the
      routesWSDL configurable variable is urlListPolicy. This is a sequence of
      string entries, where each entry is the path to a WSDL file that
      includes a route definition. In the schema file routing.xsd you can see
      that the wsdlUrl element wraps the urlListPolicy type. So to complete
      the configuration entry, you need to nest a wsdlUrl element, which in
      turn contains one or more url elements, under the value element.</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM
      "http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para></para>

      <para>&lt;beans</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:router-conf="http://celtix.objectweb.org/routing/configuration"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;bean id="..."</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.routing.configuration.spring.Configurationbean"&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="routesWSDL"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      &lt;router-conf:wsdlUrl&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;router-conf:url&gt;/wsdl/router.wsdl&lt;/router-conf:url&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/router-conf:wsdlUrl&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>This simple configuration example uses the wsdlUrl and url
      elements, and not the urlListPolicy type . A more complex example is
      presented in the next section.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Writing a Celtix Configuration File</title>

    <para>Review the structure of a Celtix configuration file (see page 2).
    You can write a separate configuration file for each process that you want
    to configure. You will then define a bean element for each component that
    requires configuration. This means that you must provide a value for the
    id and name attributes in the bean element, and for the name attribute in
    one, or more, property elements. In the property element, you specify a
    value for this configurable entry. Entering the value is the most
    difficult part of this process as you must use the information in the
    schema and XML metadata files as guides to the proper syntax.</para>

    <sect2>
      <title>The Namespace Declarations</title>

      <para>In the opening beans element, you should include namespace
      declarations corresponding to the Celtix schema files:</para>

      <orderedlist>
        <listitem>
          <para>org/objectweb/celtix/configuration/config-metadata/types.xsd</para>
        </listitem>

        <listitem>
          <para>org/objectweb/celtix/configuration/config-metadata/metadata.xsd.</para>
        </listitem>
      </orderedlist>

      <para>These declarations are then available to all bean elements in the
      configuration file. The beginning of each Celtix configuration file is
      shown in the following fragment.</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;"http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para></para>

      <para>&lt;beans</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jaxws-types="http://celtix.objectweb.org/bus/jaxws/configuration/types"&gt;</para>
    </sect2>

    <sect2>
      <title>The class Attribute</title>

      <para>The section on The Celtix Metadata XML Files explains how the
      namespace used in the metadata XML file is mapped to the name of a Java
      bean class in the Spring Framework. This class name is used as the value
      of the class attribute within a bean element. The information in the
      metadata XML and Celtix configuration files is used by the Celtix
      runtime to instantiate and initialize a bean instance that manages a
      component's configuration. The following table summarizes the class
      attribute values that correspond to each configurable component:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <thead>
            <row>
              <entry><para>Component</para></entry>

              <entry><para>Bean Class Name</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>Bus</para></entry>

              <entry><para>org.objectweb.celtix.bus.bus_config.spring.BusConfigBean</para></entry>
            </row>

            <row>
              <entry><para>Endpoint</para></entry>

              <entry><para>org.objectweb.celtix.bus.jaxws.endpoint_config.spring.EndpointConfigBean</para></entry>
            </row>

            <row>
              <entry><para>Port</para></entry>

              <entry><para>org.objectweb.celtix.bus.jaxws.port_config.spring.PortConfigBean</para></entry>
            </row>

            <row>
              <entry><para>HTTP Client Transport</para></entry>

              <entry><para>org.objectweb.celtix.bus.transports.http.http_client_config.spring.HttpClientConfigBean</para></entry>
            </row>

            <row>
              <entry><para>HTTP Server Transport</para></entry>

              <entry><para>org.objectweb.celtix.bus.transports.http.http_server_config.spring.HttpServerConfigBean</para></entry>
            </row>

            <row>
              <entry><para>HTTP Listener</para></entry>

              <entry><para>org.objectweb.celtix.bus.transports.http.http_listener_config.spring.HttpListenerConfigBean</para></entry>
            </row>

            <row>
              <entry><para>JMS Client Transport</para></entry>

              <entry><para>org.objectweb.celtix.bus.transports.jms.jms_client_config.spring.JmsServerConfigBean
              </para></entry>
            </row>

            <row>
              <entry><para>JMS Server Transport</para></entry>

              <entry><para>org.objectweb.celtix.bus.transports.jms.jms_server_config.spring.JmsServerConfigBean
              </para></entry>
            </row>

            <row>
              <entry><para>Instrumentation</para></entry>

              <entry><para>org.objectweb.celtix.bus.instrumentation.spring.InstrumentationConfigBean.</para></entry>
            </row>

            <row>
              <entry><para>Reliable Messaging</para></entry>

              <entry><para>org.objectweb.celtix.bus.ws.rm.rm_config.spring.RmConfigBean</para></entry>
            </row>

            <row>
              <entry><para>Routing Service</para></entry>

              <entry><para>org.objectweb.celtix.routing.configuration.spring.ConfigurationBean</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>The id Attribute</title>

      <para>The value of the id attribute can indicate what component the
      configuration applies to, however, it is not a simple one-to-one
      relationship like the class attribute. This is because the id is
      generally derived from information in the WSDL file that describes the
      service. This can be illustrated using the simple hello world WSDL file
      that follows. The entries that you need to specify the id are
      highlighted:</para>

      <orderedlist>
        <listitem>
          <para>the targetNamespace</para>
        </listitem>

        <listitem>
          <para>the service name</para>
        </listitem>

        <listitem>
          <para>the port name</para>
        </listitem>
      </orderedlist>

      <para>You also need the name assigned to the Celtix bus. By default, in
      a simple application where the bus instance is created transparently by
      the Celtix runtime, the bus name is celtix.</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;wsdl:definitions name="HelloWorld"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetNamespace="http://objectweb.org/hello_world"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:types&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;schema targetNamespace=</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"http://objectweb.org/hello_world_soap_http/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/schema&gt;</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:types&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:message name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;...</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:message&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&lt;wsdl:message name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;...</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:message&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:portType name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:operation name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:input message="..."
      name="..." /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:output message="..."
      name="..." /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:operation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:operation name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:input message="..."
      name="..." /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:output message="..."
      name="..." /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:operation&gt;</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:portType&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:binding name="..." type="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:binding style="document"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transport="http://schemas.xmlsoap.org/soap/http"
      /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:operation name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:operation
      soapAction="" style="document" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:input
      name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:body
      use="literal" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:input&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:output
      name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:body
      use="literal" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:output&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:operation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:operation name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:operation
      soapAction="" style="document" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:input
      name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:body
      use="literal" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:input&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:output
      name="..."&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:body
      use="literal"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:output&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:operation&gt;</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:binding&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:service name="SOAPService"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;wsdl:port binding="..."
      name="SoapPort"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:address
      location="http://localhost:9000/SoapContext/SoapPort" /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/wsdl:port&gt;</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:service&gt;</para>

      <para>&lt;/wsdl:definitions&gt;</para>

      <para>The following table lists which pieces of information are needed
      to create the id for each configurable component and shows the resulting
      value specific to this WSDL file.</para>

      <informaltable frame="all">
        <tgroup cols="3">
          <thead>
            <row>
              <entry><para>Component</para></entry>

              <entry><para>Instance Identifier</para></entry>

              <entry><para>id Value</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>Bus</para></entry>

              <entry><para>Bus name</para></entry>

              <entry><para>celtix</para></entry>
            </row>

            <row>
              <entry><para>Endpoint</para></entry>

              <entry><para>Bus name and QName of service</para></entry>

              <entry><para>celtix.{http://objectweb.org/hello_world}SOAPService</para></entry>
            </row>

            <row>
              <entry><para>Port</para></entry>

              <entry><para>Bus name, QName of service, and name of
              port</para></entry>

              <entry><para>celtix.{http://objectweb.org/hello_world}SOAPService/SoapPort</para></entry>
            </row>

            <row>
              <entry><para>HTTP Client Transport</para></entry>

              <entry><para>Bus name, QName of service, name of port, and
              string constant</para></entry>

              <entry><para>celtix.{http://objectweb.org/hello_world}SOAPService/SoapPort.http-client</para></entry>
            </row>

            <row>
              <entry><para>HTTP Server Transport</para></entry>

              <entry><para>Bus name, QName of service, name of port, and
              string constant</para></entry>

              <entry><para>celtix.{http://objectweb.org/hello_world}SOAPService/SoapPort.http-server</para></entry>
            </row>

            <row>
              <entry><para>HTTP Listener</para></entry>

              <entry><para>Bus name, string constant, and port number (where
              port number is the TCP/IP port number set in the server mainline
              code).</para></entry>

              <entry><para>celtix.http-listener.port_number</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>

    <sect2>
      <title>The property Element</title>

      <para>The best way to learn how to complete the rest of the Celtix
      configuration file is to look at some examples.</para>

      <para>Setting the endpoint URL</para>

      <para>The most straightforward example is where you want to configure
      the client application so that the URL used to invoke on the endpoint is
      defined in the configuration file instead of the WSDL file's content.
      The following fragment shows the corresponding property element for the
      hello world example. This corresponds to the configuration entry that
      sets the URL:</para>

      <para>&lt;bean
      id="celtix.{http://objectweb.org/hello_world}SOAPService.SoapPort"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.jaxws.port_config.spring.PortConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&lt;property name="address"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ct:stringValue&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://localhost:9002/SoapContext/SoapPort</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ct:stringValue&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&lt;/bean&gt;</para>

      <para>Because you are configuring an HTTP port, the appropriate XML
      metadata file to use as a guide is port-config.xml, and the desired
      configItem element is address. Assign the value of the configItem's name
      attribute to the property element's name attribute. In the value
      element, enter a string that is the desired URL. Notice that the element
      used to delimit the URL correspond to an element type defined in the
      schema file std-types.xsd. The configuration scheme also supports a
      shorthand notation that eliminates the stringValue tags.</para>

      <para>&lt;value&gt;http://localhost:9002/SoapContext/SoapPort&lt;/value&gt;</para>

      <para>Specifying a handler</para>

      <para>The server configuration file (celtix-server.xml) included in the
      handlers product demo shows a more complex example:</para>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM</para>

      <para>&nbsp;&nbsp;"http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para>&lt;beans</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jaxws-types="http://celtix.objectweb.org/bus/jaxws/configuration/types"&gt;</para>

      <para>&nbsp;&nbsp;&lt;bean
      id="celtix.{http://www.objectweb.org/handlers}AddNumbersService"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"org.objectweb.celtix.bus.jaxws.endpoint_config.spring.EndpointConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property
      name="handlerChain"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-chain&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File
      Logging Handler</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-class&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo.handlers.common.FileLoggingHandler</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-class&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-chain&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>Because you are configuring a service endpoint, the appropriate
      XML metadata file to use as a guide is endpoint-config.xml, and the
      desired configItem element is handlerChain. Assign the value of the
      configItem's name attribute to the property element's name attribute. In
      the value element, you need to make entries that identify the class in
      your application that implements the handler you want to deploy.</para>

      <para>Deciding what to place in the value element is a little more
      complex than in the previous example. In the metadata XML file, the
      handlerChain entry corresponds to the handlerChainType defined in the
      schema file jaxws-types.xsd. However, because the handlerChainType is a
      complex type, and the configuration file must include an element type,
      you identify the handler-chain element type as a suitable replacement.
      Then you look up the composition of the handlerChainType and determine
      that it includes a optional handler-name, of type string, and a sequence
      of zero or more handlerType instances.</para>

      <para>&lt;xs:complexType name="handlerChainType"&gt;</para>

      <para>&nbsp;&nbsp;&lt;xs:sequence&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="handler-chain-name"
      type="xs:string"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="handler"
      type="tns:handlerType"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minOccurs="0"
      maxOccurs="unbounded"/&gt;</para>

      <para>&nbsp;&nbsp;/xs:sequence&gt;</para>

      <para>&lt;/xs:complexType&gt;</para>

      <para>And the handlerType is also a sequence in which only the second
      element is required:</para>

      <para>&lt;xs:complexType name="handlerType"&gt;</para>

      <para>&nbsp;&nbsp;&lt;xs:sequence&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="handler-name"
      type="xs:string" minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="handler-class"
      type="xs:string"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="init-param"
      type="tns:handlerInitParamType"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nillable="false"
      minOccurs="0" maxOccurs="unbounded"/&gt;</para>

      <para>&nbsp;&nbsp;&lt;/xs:sequence&gt;</para>

      <para>&lt;/xs:complexType&gt;</para>

      <para>In the configuration file, use the handler-name and handler-class
      types to specify the handler class.</para>

      <para>&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&lt;jaxws-types:handler-chain&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File Logging
      Handler</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-class&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo.handlers.common.FileLoggingHandler</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-class&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&lt;/jaxws-types:handler-chain&gt;</para>

      <para>&lt;/value&gt;</para>

      <para>Specifying initialization parameters</para>

      <para>If your handler class requires initialization parameters, the
      handlerType allows for this through its init-param element, which is an
      instance of handlerInitParamType. The handlerInitParamType is a sequence
      of name value pairs that correspond to the handler's initialization
      values. Because the handlerInitParamType is an unbounded sequence, your
      configuration entry may have as many init-param elements as required.
      The following fragment illustrates how the init-param elements would be
      included in the configuration file.</para>

      <para>&lt;property name="handlerChain"&gt;</para>

      <para>&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-chain&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-name&gt;...&lt;/jaxws-types:handler-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:handler-class&gt;...&lt;/jaxws-types:handler-class&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:init-param&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:param-name&gt;arg1&lt;/jaxws-types:param-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:param-value&gt;value1&lt;/jaxws-types:param-value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:init-param&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:init-param&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:param-name&gt;arg2&lt;/jaxws-types:param-name&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jaxws-types:param-value&gt;value2&lt;/jaxws-types:param-value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:init-param&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/jaxws-types:handler-chain&gt;</para>

      <para>&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&lt;/property&gt;</para>

      <para>Specifying authorization information</para>

      <para>Because you are configuring the client service, the appropriate
      metadata XML file to use as a guide is http-client-config.xml. The
      desired configItem element is authorization. Assign the value of the
      configItem name element to the property element's name attribute.</para>

      <para>In the metadata XML file, the authorization entry corresponds to
      the AuthorizationPolicy type defined in the schema file security.xsd.
      However, because the AuthorizationPolicy type is a complex type, and the
      configuration file must include a element type, you identify the
      authorization element as a suitable replacement. Then look up the
      composition of the AuthorizationPolicy type and determine that it is a
      sequence of the following elements: UserName, Password,
      AuthorizationType, and Authorization.</para>

      <para>&lt;xs:complexType name="AuthorizationPolicy"&gt;</para>

      <para>&nbsp;&nbsp;&lt;xs:sequence&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="UserName"
      type="xs:string" minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="Password"
      type="xs:string" minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="AuthorizationType"
      type="xs:string" minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:element name="Authorization"
      type="xs:string" minOccurs="0"/&gt;</para>

      <para>&nbsp;&nbsp;&lt;/xs:sequence&gt;</para>

      <para>&lt;/xs:complexType&gt;</para>

      <para></para>

      <para>&lt;xs:element name="authorization"
      type="tns:AuthorizationPolicy"/&gt;</para>

      <para>Combining this information, leads to the following bean element.
      Note the use of the sec: namespace prefix. You must include the
      corresponding namespace declaration at the beginning of the
      configuration file.</para>

      <para>&lt;beans
      xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:sec="http://celtix.objectweb.org/bus/configuration/security"&gt;</para>

      <para>&nbsp;&nbsp;&lt;bean</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;id="celtix.{http://objectweb.org/hello_world_soap_http}SOAPService.SoapPort.http-client"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.transports.http.http_client_config.spring.HttpClientConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property
      name="authorization"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:authorization&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:UserName&gt;User&lt;/sec:UserName&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:Password&gt;celtix&lt;/sec:Password&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/sec:authorization&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>Setting transport attributes</para>

      <para>The configItem element httpClient in the http-client-config.xml
      metadata file indicates that the HTTPClientPolicy type can be used to
      set transport attributes. The HTTPClientPolicy type, defined in the
      resources/schemas/wsdl/http-conf.xsd schema file, is a complex type
      consisting of multiple attributes. This example illustrates how to use
      attributes to send the request to a proxy server.</para>

      <para>&lt;xs:complexType name="HTTPClientPolicy"&gt;</para>

      <para>&nbsp;&nbsp;&lt;xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTP client configuration
      properties.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used for configuring a HTTP
      client port.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&lt;/xs:annotation&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;xs:complexContent&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:extension
      base="wsdl:tExtensibilityElement"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- Other attribute
      definitions --&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:attribute
      name="AutoRedirect" type="xs:string" use="optional"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default="false"/&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Proxy server
      attributes--&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:attribute
      name="ProxyServer" type="xs:string" use="optional"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Address
      of proxy server, if used</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(proxy
      servers are a special kind of firewall)</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy.mycompany.com</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:attribute&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:attribute
      name="ProxyServerPort" type="xs:int" use="optional"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Port
      number of proxy server.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:attribute&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:attribute
      name="ProxyServerType" type="http-conf:proxyServerType"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use="optional"
      default="HTTP"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type
      of number of proxy server.</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:documentation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:annotation&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:attribute&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/xs:extension&gt;</para>

      <para>&nbsp;&nbsp;&lt;/xs:complexContent&gt;</para>

      <para>&lt;/xs:complexType&gt;</para>

      <para>&lt;xs:element name="client"
      type="http-conf:HTTPClientPolicy"/&gt;</para>

      <para>The client element may be used to reference the HTTPClientPolicy
      type in a Celtix configuration file. The bean class used to configure
      transport attributes is the same as the bean class used to configure
      authorization. The http-conf.xsd schema file is described in the
      namespace <classname>http://celtix.objectweb.org/transports/http/configuration</classname>, 
	  and you must include a prefix
      definition for this namespace at the beginning of the Celtix
      configuration file:</para>

      <para>&lt;beans
      xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:sec="http://celtix.objectweb.org/bus/configuration/security"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:http-conf="http://celtix.objectweb.org/transports/http/configuration"&gt;</para>

      <para>&nbsp;&nbsp;&lt;bean</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;id="celtix.{http://objectweb.org/hello_world_soap_http}SOAPService.SoapPort.http-client"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.transports.http.http_client_config.spring.HttpClientConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="httpClient"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;http-conf:client
      ProxyServer="localhost" ProxyServerPort="5049"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoRedirect="true"
      /&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>
    </sect2>
  </sect1>

  <sect1>
    <title>An Example Application</title>

    <para>Celtix includes several sample applications that illustrate
    configuration techniques. However, the best way to learn is to try it
    yourself, so here is a simple example. Besides giving you a chance to
    write a Celtix configuration file, this example will show you how to
    direct your application to use the configuration file.</para>

    <sect2>
      <title>The Application Code</title>

      <para>For this example, you build on the hello_world product demo. You
      need to perform the following steps:</para>

      <orderedlist>
        <listitem>
          <para>Build this demo and confirm that it runs successfully using
          both the ant utility and the java executable, as described in the
          demo README file.</para>
        </listitem>
      </orderedlist>

      <para>In this demo, the server mainline code sets the URL on which the
      application will listen for incoming requests, for example:</para>

      <para>package demo.hw.server;</para>

      <para>import javax.xml.ws.Endpoint;</para>

      <para></para>

      <para>public class Server {</para>

      <para></para>

      <para>&nbsp;&nbsp;protected Server() throws Exception {</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Starting
      Server");</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;Object implementor = new
      GreeterImpl();</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;String address =
      "http://localhost:9000/SoapContext/SoapPort";</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;Endpoint.publish(address,
      implementor);</para>

      <para>&nbsp;&nbsp;}</para>

      <para></para>

      <para>&nbsp;&nbsp;public static void main(String args[]) throws
      Exception {</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;new Server();</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Server
      ready...");</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(5 * 60 * 1000);</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Server
      exiting");</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;System.exit(0);</para>

      <para>&nbsp;&nbsp;}</para>

      <para>}</para>

      <para>The client, however, obtains the URL from the WSDL file, as
      follows:</para>

      <para>&lt;wsdl:service name="SOAPService"&gt;</para>

      <para>&nbsp;&nbsp;&lt;wsdl:port binding="tns:Greeter_SOAPBinding"
      name="SoapPort"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;soap:address
      location="http://localhost:9000/SoapContext/SoapPort"/&gt;</para>

      <para>&nbsp;&nbsp;&lt;/wsdl:port&gt;</para>

      <para>&lt;/wsdl:service&gt;</para>

      <orderedlist>
        <listitem>
          <para>In a text editor, open the WSDL file and change the TCP/IP
          port (any value is acceptable, just be certain that it is an unused
          port number).</para>
        </listitem>

        <listitem>
          <para>Save the WSDL file.</para>
        </listitem>
      </orderedlist>

      <para>&lt;soap:address
      location="http://localhost:9002/SoapContext/SoapPort"/&gt;</para>

      <orderedlist>
        <listitem>
          <para>Now if you try to run the client, it will be unable to contact
          the server and the invocation requests will fail.</para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2>
      <title>The Configuration File</title>

      <orderedlist>
        <listitem>
          <para>Write a configuration file that sets the address property of
          the PortConfigBean, for example:</para>
        </listitem>
      </orderedlist>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM</para>

      <para>&nbsp;&nbsp;"http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para>&lt;beans
      xmlns:ct="http://celtix.objectweb.org/configuration/types"&gt;</para>

      <para>&nbsp;&nbsp;&lt;bean
      id="celtix.{http://objectweb.org/hello_world_soap_http}SOAPService.SoapPort"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.jaxws.port_config.spring.PortConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="address"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ct:stringValue&gt;http://localhost:9000/SoapContext/SoapPort&lt;/ct:stringValue&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>Alternatively, you may code the value element as:</para>

      <para>&lt;value&gt;</para>

      <para>&nbsp;&nbsp;http://localhost:9000/SoapContext/SoapPort</para>

      <para>&lt;/value&gt;</para>

      <orderedlist>
        <listitem>
          <para>Add a bean element for a HttpClientConfigBean and include a
          property element to set authorization details and another property
          element to set the attributes related to the proxy server.</para>
        </listitem>
      </orderedlist>

      <para>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</para>

      <para>&lt;!DOCTYPE beans SYSTEM</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;"http://celtix.objectweb.org/configuration/spring/celtix-spring-beans.dtd"&gt;</para>

      <para>&lt;beans
      xmlns:ct="http://celtix.objectweb.org/configuration/types"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:sec="http://celtix.objectweb.org/bus/configuration/security"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:http-conf="http://celtix.objectweb.org/transports/http/configuration"&gt;</para>

      <para>&nbsp;&nbsp;&lt;bean
      id="celtix.{http://objectweb.org/hello_world_soap_http}SOAPService.SoapPort"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.jaxws.port_config.spring.PortConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="address"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ct:stringValue&gt;http://localhost:9000/SoapContext/SoapPort&lt;/ct:stringValue&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&lt;bean</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;id="celtix.{http://objectweb.orb/hello_world_soap_http}SOAPService.SoapPort.http-client"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;class="org.objectweb.celtix.bus.transports.http.http_client_config.spring.HttpClientConfigBean"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property
      name="authorization"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:authorization&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:UserName&gt;User&lt;/sec:UserName&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;sec:Password&gt;celtix&lt;/sec:Password&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/sec:authorization&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para></para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- If you have a proxy server, remove
      comments and edit the values of</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProxyServer
      and ProxyServerPort accordingly. --&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name="httpClient"&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;http-conf:client
      ProxyServer="localhost" ProxyServerPort="5049"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoRedirect="true"/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/value&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;--&gt;</para>

      <para>&nbsp;&nbsp;&lt;/bean&gt;</para>

      <para>&lt;/beans&gt;</para>

      <para>The configuration file now includes two &lt;bean&gt; elements; the
      first represents configurable settings described in the port-config.xml
      metadata file, and the second represents configurable settings in the
      http-client-config.xml metadata file.</para>

      <orderedlist>
        <listitem>
          <para>Save this file in text format into the
          installationDirectory/celtix/samples/hello_world directory; you may
          give the file any name; the next section assumes that the file is
          saved as client.xml. The WSDL file now has an incorrect URL while
          the configuration file and server mainline have the same URL.</para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2>
      <title>Running the Example</title>

      <orderedlist>
        <listitem>
          <para>Build the applications by issuing the ant build command. Then,
          using either the ant utility or the java executable, start the
          server application as described in the README.</para>
        </listitem>

        <listitem>
          <para>When running the client application, you must force it to read
          the configuration file. You do this by providing a -D command line
          argument to the java executable.</para>
        </listitem>

        <listitem>
          <para>To run the client using the java executable, enter the
          command:</para>
        </listitem>
      </orderedlist>

      <para>java
      -Djava.util.logging.config.file=%CELTIX_HOME%\etc\logging.properties</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-Dceltix.config.file=file:///%CELTIX_HOME%\samples\hello_world\client.xml</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;demo.hw.client.Client
      .\wsdl\hello_world.wsdl</para>

      <orderedlist>
        <listitem>
          <para>To run the client using the ant utility, you will need to edit
          the build.xml file that is in the directory
          installationDirectory/celtix/samples/hello_world.</para>
        </listitem>

        <listitem>
          <para>Open this file in a text editor and modify the client
          target.</para>
        </listitem>
      </orderedlist>

      <para>&lt;target name="client" description="run demo client"&gt;</para>

      <para>&nbsp;&nbsp;&lt;property name="param" value=""/&gt;</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&lt;celtixrun
      classname="demo.hw.client.Client"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jvmarg1="-Dceltix.config.file=file:///${basedir}/client.xml"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param1="${basedir}/wsdl/hello_world.wsdl"</para>

      <para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param2="${op}"
      param3="${param}"/&gt;</para>

      <para>&lt;/target&gt;</para>

      <para></para>
    </sect2>
  </sect1>
</article>