<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="en-US">
<title>Getting Started with Celtix</title>
<sect1>
<title>Overview</title>
<para>This document shows you how to get started with Celtix. It describes how to build and run a 
basic SOAP over HTTP client and server.</para>
<para>For information on how to install Celtix and set up your development environment, see 
<ulink url="site:install">The Celtix Installation Guide</ulink>, which is included in the product 
download and is available from the Celtix website, 
<ulink url="http://celtix.objectweb.org/docs/index.html">http://celtix.objectweb.org/docs/index.html</ulink>.</para>
<para>This document was written for the Celtix 1.0 release. As Celtix matures future versions 
might deviate from the material covered in this document. The Celtix team will endeavor, however, 
to keep this document as up-to-date as possible.</para>
</sect1>
<sect1>
<title>Using a Script to Set Up the Shell Environment</title>
<para><emphasis>The Celtix Installation Guide</emphasis> describes how to set up your 
development environment. To avoid having to set the environment variables for every command 
window, you can use a script. An example script, <filename>setenvs.bat</filename>, for use on 
Windows with the Celtix binary distribution, is shown below in Example 1.</para>
<para>A corresponding script for use on Windows with the Celtix source distribution is shown in 
Example 2. This script is only suitable for compiling and running Celtix applications when using 
the Apache Ant build system, as described in the rest of this document.</para>
</sect1>
<sect1>
<title>Celtix Development Environment</title>
<para>Developing applications with Celtix code is no different from developing with any other Java 
library or API. You set the <envar>CLASSPATH</envar> appropriately and begin coding. You can 
develop with your favorite text editor, Integrated Development Environment (IDE), or build system. 
In this section, we recommend two open-source tools that are used extensively by Celtix developers:</para>
<itemizedlist>
<listitem>
<para>Eclipse</para>
</listitem>
<listitem>
<para>Apache Ant</para>
</listitem>
</itemizedlist>
<sect2>
<title>Using Celtix with Eclipse</title>
<para>Eclipse provides an excellent Java IDE for Celtix development. It is available from 
<ulink url="http://www.eclipse.org/">http://www.eclipse.org</ulink>. Celtix requires you to use 
Eclipse 3.1.1 or higher. This is because Celtix requires support for Java 1.5 language constructs, 
which are only available in Eclipse 3.1.1 or higher.</para>
<para>Eclipse allows you to store collections of JARs and classes that can be reused across 
projects as “User Libraries”. To create a Celtix user library:</para>
<orderedlist>
<listitem>
<para>Open Eclipse and navigate to:</para>
</listitem>
</orderedlist>
<para>Window | Preferences | Java | Build Path | User Libraries</para>
<orderedlist>
<listitem>
<para>Create a new user library by selecting New and giving it a name, such as Celtix.</para>
</listitem>
<listitem>
<para>Highlight your newly created Celtix user library and select Add JARs. Add the 
<filename>celtix.jar</filename> file to the user library. In the Celtix binary distribution, the 
<filename>celtix.jar</filename> file can be found in the <filename>CELTIX_HOME/lib</filename> directory.</para>
</listitem>
</orderedlist>
<para>At the time of writing, Eclipse could not pick up the manifest classpath present in the 
<filename>celtix.jar</filename> file. As a result, you must add all of the JAX-WS JAR files to 
your user library as well. In the Celtix binary distribution these files can be found in the 
<filename>CELTIX_HOME/lib</filename> directory.</para>
<para>After you have created a user library for Celtix, you can add it to the Java project build 
path and Eclipse will auto-compile your code.</para>
</sect2>
<sect2>
<title>Using Celtix with Ant</title>
<para>Many Java developers use the Apache Ant build system. It is available from 
<ulink url="http://ant.apache.org/">http://ant.apache.org</ulink>. The Celtix samples, available 
in the <filename>CELTIX_HOME/samples</filename> directory of your Celtix installation, include 
example Ant build files. Example 3 shows one such file.</para>
<para>The build file shown in Example 3 can be explained as follows:</para>
<orderedlist>
<listitem>
<para>Imports the <filename>common_build.xml</filename> file. <filename>common_build.xml</filename> 
includes most of the commands that compile and run the sample applications. It can be found in the 
<filename>CELTIX_HOME/samples</filename> directory of your Celtix installation.</para>
</listitem>
<listitem>
<para>The codegen.notrequired variable is true if no XSD or WSDL files in the project have changed 
since the last time the wsdl2java utility was run. If you do not declare wsdl.dir as a property 
that identifies the location of XSD and/or WSDL files, then the default value of ./wsdl is used.</para>
</listitem>
<listitem>
<para>The wsdl2java task generates Java code from the specified WSDL file.</para>
</listitem>
<listitem>
<para>The celtixrun task runs a Java class with the appropriate CLASSPATH and JVM argument 
settings for use with Celtix.</para>
</listitem>
</orderedlist>
<para>The common_build.xml and build.xml files that are supplied with the Celtix sample 
applications are useful models for building applications using a directory structure similar to 
that used by the Celtix samples.</para>
</sect2>
</sect1>
<sect1>
<title>Directory Structure for Celtix Projects</title>
<para>How you arrange a project's directory structure depends on whether you are modeling your 
hierarchy on the Celtix samples, available in the <filename>CELTIX_HOME/samples</filename> 
directory of your Celtix installation, or using the Celtix wsdl2java utility to generate starting 
point code. The Celtix wsdl2java utility is a command-line utility that you can use to generate 
Java files from a specified WSDL file, including files that represent the types, service proxy, 
and service interface for an application, starting point code for the client and server mainlines, 
and the implementation object. Which files are generated is dependent of the command-line switches 
that you use. For more information on the wsdl2java utility, see the 
<ulink url="site:tools">Celtix Command-Line Tools</ulink> documentation.</para>
<sect2>
<title>The Celtix Sample Application Approach</title>
<para>The Celtix sample applications use the wsdl2java utility to generate files that represent 
the types, service proxy, and service interface for an application. The wsdl2java utility is not 
used to generate starting point code for the client and server mainlines or the implementation 
object. These files are provided as completed implementations so that the sample applications run 
without requiring the user to add processing logic.</para>
<para>The Celtix sample applications contain the following directories:</para>
<orderedlist>
<listitem>
<para><filename>build/classes</filename>, which contains compiled Java classes, including those 
generated by the wsdl2java utility.</para>
</listitem>
<listitem>
<para><filename>build/src</filename>, which contains Java source code generated by the wsdl2java 
utility.</para>
</listitem>
<listitem>
<para><filename>src</filename>, which contains the supplied Java source code. These files can be 
in a different Java package than the Java source code files generated by the wsdl2java utility.</para>
</listitem>
<listitem>
<para><filename>wsdl</filename>, which contains WSDL and XSD files.</para>
</listitem>
</orderedlist>
<!--
<para>
<inlinegraphic fileref="" width=""/>
</para>
-->
<para>The top-level project directory contains the Ant build file (<filename>build.xml</filename>).</para>
<para>As shown in Example 3 above, <filename>build.xml</filename> imports 
<filename>common_build.xml</filename>, which is located at the top level of the Celtix samples 
directory, <filename>CELTIX_HOME/samples</filename>.</para>
</sect2>
<sect2>
<title>The Developer Driven Approach</title>
<para>The developer driven approach uses the wsdl2java utility to generate the complete complement 
of source code files, starting point code for the client mainline, server mainline, and 
implementation object. These files are included in the same Java package as the files representing 
the types, service proxy, and service interface.</para>
<para>Developer written Celtix applications contain the following directories:</para>
<orderedlist>
<listitem>
<para>A project directory that includes:</para>
<orderedlist>
<listitem>
<para>One, or more, top-level application directories that contain:</para>
<orderedlist>
<listitem>
<para>The source code files for the application. The source code files include both the files 
generated by the wsdl2java utility as well as any other files that you want to include in the 
application.</para>
</listitem>
<listitem>
<para>A <filename>build/classes</filename> subdirectory that contains the compiled application 
files.</para>
</listitem>
<listitem>
<para>The Ant build file (<filename>build.xml</filename>) generated by the wsdl2java utility.</para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>A <filename>wsdl</filename> directory that contains WSDL and XSD files.</para>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<para>The following figure illustrates this directory hierarchy:</para>
<orderedlist>
<listitem>
<para>The project directory is <filename>hello_world</filename>.</para>
<orderedlist>
<listitem>
<para>The top-level application directory is client.</para>
<orderedlist>
<listitem>
<para>The source code generated by the wsdl2java utility is in the package hierarchies 
org/objectweb/hello_world_soap_http and org/objectweb/hello_world_soap_http/types under the 
<filename>hello_world/client</filename> directory. The package name was derived from the target 
namespace defined in the WSDL file.</para>
</listitem>
<listitem>
<para>The <filename>hello_world/client/build/classes</filename> directory includes the compiled 
code in the package hierarchies org/objectweb/hello_world_soap_http and 
org/objectweb/hello_world_soap_http/types.</para>
</listitem>
</orderedlist>
</listitem>
<listitem>
<para>
<!--
<inlinegraphic fileref="" width=""/>
-->
The <filename>wsdl</filename> directory contains the WSDL file used to generate the application code.</para>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</sect2>
</sect1>
<sect1>
<title>Writing a SOAP over HTTP Client and Server with Celtix</title>
<para>This section describes how you can use Celtix to write a SOAP over HTTP client and server. 
Both the Celtix sample application approach and the developer driven approach are discussed.</para>
<para>The HelloWorld interface used in this section is defined in the HelloWorld.wsdl WSDL file 
shown in Example 5. It corresponds to the Java interface shown in Example 4. It is slightly 
different to the WSDL file used in the HelloWorld sample that is included with the Celtix 
distribution.</para>
<sect2>
<title>Using the Celtix Sample Application Approach</title>
<para>Use the Celtix sample application approach to build applications when working with the 
Celtix source distribution. In the Celtix source distribution, the collection of JAR files that 
comprise the Celtix product are distributed throughout the product directories. As a result, it is 
somewhat involved to list all of these JAR files on the <envar>CLASSPATH</envar>. When you use the 
Celtix sample application approach, <filename>common_build.xml</filename> correctly sets the 
<envar>CLASSPATH</envar>.</para>
<para>To use the Celtix sample application approach, do the following:</para>
<orderedlist>
<listitem>
<para>
<!--
<inlinegraphic fileref="" width=""/>
-->
Replicate the directory hierarchy used in the sample applications. For instance, using the 
HelloWorld interface described in Example 4 as an example, create the following directory structure:</para>
</listitem>
</orderedlist>
<orderedlist>
<listitem>
<para>Place your WSDL file into the <filename>wsdl</filename> directory. For example, place 
<filename>HelloWorld.wsdl</filename>, shown in Example 5 in the <filename>wsdl</filename> directory.</para>
</listitem>
<listitem>
<para>Copy a <filename>build.xml</filename> file from one of the sample applications and modify it 
as required. For example, place the <filename>build.xml</filename> file shown in Example 6 in the 
top-level <filename>HelloWorld</filename> directory.</para>
</listitem>
<listitem>
<para>Write the client mainline, server mainline, and implementation object source code files and 
add them to the <filename>src</filename> directory.</para>
</listitem>
<listitem>
<para>Use Ant to generate code for the type, service proxy, and service interface files and to 
compile the applications. For example, from the top-level <filename>HelloWorld</filename> 
directory, issue the <userinput>ant build</userinput> command. This creates the 
<filename>build/classes</filename> directory hierarchy and generates the type, service proxy, and 
service interface files, and compiles the applications.</para>
</listitem>
<listitem>
<para>Use Ant to run the client and server applications. For example, from the top-level 
<filename>HelloWorld</filename> directory, issue the <userinput>ant server</userinput> and 
<userinput>ant client</userinput> commands to run the client and server applications.</para>
</listitem>
</orderedlist>
</sect2>
<sect2>
<title>Using the Developer Driven Approach</title>
<para>The developer driven approach refers to an approach in which you use the Celtix wsdl2java 
utility to generate an Ant <filename>build.xml</filename> file that accurately lists all Celtix 
JARs on the <envar>CLASSPATH</envar>. This approach is suitable when you are working with the 
Celtix binary distribution.</para>
<para>To use the developer driven approach, do the following:</para>
<orderedlist>
<listitem>
<para>Create the project directory structure as shown below:</para>
</listitem>
</orderedlist>
<!--
<para>
<inlinegraphic fileref="" width=""/>
</para>
-->
<orderedlist>
<listitem>
<para>Place the WSDL file into the <filename>wsdl</filename> directory. Use the 
<filename>HelloWorld.wsdl</filename> file shown in Example 5 as an example.</para>
</listitem>
<listitem>
<para>Use the wsdl2java utility to generate the starting point code, including the client 
mainline, for the client application. For example, from the <filename>HelloWorld</filename> 
top-level directory, issue the following command:</para>
<screen><userinput>wsdl2java -client -d client -ant .\wsdl\HelloWorld.wsdl</userinput></screen>
</listitem>
<listitem>
<para>Use the wsdl2java utility to generate starting point code, including the server mainline and 
implementation object, for the server application. For example, from the <filename>HelloWorld</filename>
 top-level directory, issue the following command:</para>
<screen><userinput>wsdl2java -server -impl -d server -ant .\wsdl\HelloWorld.wsdl</userinput></screen>
</listitem>
<listitem>
<para>Complete coding the client mainline and implementation object.</para>
</listitem>
<listitem>
<para>The wsdl2java utility creates an Ant <filename>build.xml</filename> file in each of the 
top-level application directories—client and server. Issue the command <userinput>ant build</userinput> 
in each of these directories to compile your applications.</para>
</listitem>
</orderedlist>
<sect3>
<title>Running the Applications using Ant</title>
<para>You can use Ant to run each of the applications. The actual syntax of the command depends on 
the name of the port type defined in the WSDL file. For example, in the 
<filename>HelloWorld.wsdl</filename> file, the port type is called HelloWorld, and 
<filename>build.xml</filename> file targets used to run the client and server applications are 
HelloWorld.Client and HelloWorld.Server.</para>
</sect3>
<sect3>
<title>Running the Applications using java</title>
<para>The Celtix runtime uses the java.util.logging framework. You can configure Celtix logging 
levels by pointing the JVM to a <filename>logging.properties</filename> file by defining the JVM 
system variable java.util.logging.config.file. Celtix provides a default 
<filename>logging.properties</filename> file in the <filename>etc</filename> directory, so you can 
use: <userinput>-Djava.util.logging.config.file=%CELTIX_HOME%/etc/logging.properties</userinput>.</para>
<para>To run the server application using java, move to the <filename>server/build/classes</filename> 
directory and issue the following command:</para>
<screen>
<userinput>java -Djava.util.logging.config.file=%CELTIX_HOME%/etc/logging.properties 
<replaceable>&lt;full package name of server&gt;</replaceable></userinput>
</screen>
<para>To run the client application, move to the <filename>client/build/classes</filename> 
directory and issue the following command:</para>
<screen>
<userinput>java -Djava.util.logging.config.file=%CELTIX_HOME%/etc/logging.properties 
<replaceable>&lt;full package name of client&gt;</replaceable> 
<replaceable>&lt;path to WSDL file&gt;</replaceable></userinput></screen>
<para>Note that you must supply the relative, or absolute, path to the WSDL file when running the client.</para>
</sect3>
</sect2>
</sect1>
</article>