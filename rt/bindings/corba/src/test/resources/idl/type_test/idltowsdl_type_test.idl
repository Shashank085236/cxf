/* 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ 

interface idltowsdlTypeTest {
    
    string greetMe(in string name);

    ////
    // base_type_spec

    typedef long TpInt32;

    typedef TpInt32 TpDuration;

    TpDuration testAlias(in TpDuration inDuration,
	                     inout TpDuration inoutDuration,
						 out TpDuration outDuration);


    // floating point types
    float testFloat(in float inFloat,
                    inout float inoutFloat,
                    out float outFloat);
    double testDouble(in double inDouble,
                      inout double inoutDouble,
                      out double outDouble);
    // long double primitive type not supported?
    //long double testLongDouble(in long double inLongDouble,
    //                           out long double outLongDouble,
    //                           inout long double inoutLongDouble);

    // signed integers
    short testShort(in short inShort,
                    inout short inoutShort,
                    out short outShort);
    long testLong(in long inLong,
                  inout long inoutLong,
                  out long outLong);
    long long testLongLong(in long long inLongLong,
                           inout long long inoutLongLong,
                           out long long outLongLong);

    // unsigned integers
    unsigned short testUnsignedShort(in unsigned short inUnsignedShort,
                                     inout unsigned short inoutUnsignedShort,
                                     out unsigned short outUnsignedShort);
    unsigned long testUnsignedLong(in unsigned long inUnsignedLong,
                                   inout unsigned long inoutUnsignedLong,
                                   out unsigned long outUnsignedLong);
    unsigned long long testUnsignedLongLong(in unsigned long long inUnsignedLongLong,
                                            inout unsigned long long inoutUnsignedLongLong,
                                            out unsigned long long outUnsignedLongLong);

    // chars
    char testChar(in char inChar,
                  inout char inoutChar,
                  out char outChar);
    wchar testWchar(in wchar inWchar,
                    inout wchar inoutWchar,
                    out wchar outWchar);

    // boolean
    boolean testBoolean(in boolean inBoolean,
                        inout boolean inoutBoolean,
                        out boolean outBoolean);

    // octet
    octet testOctet(in octet inOctet,
                    inout octet inoutOctet,
                    out octet outOctet);

    // any
    any testAny(in any inAny,
                inout any inoutAny,
                out any outAny);


    ////
    // template_type_spec

    // sequence
    typedef sequence< long > seqLong;
    seqLong testSeqLong(in seqLong inSeqLong,
                        inout seqLong inoutSeqLong,
                        out seqLong outSeqLong);

    // string
    string testString(in string inString,
                      inout string inoutString,
                      out string outString);

    // wide string
    wstring testWstring(in wstring inWstring,
                        inout wstring inoutWstring,
                        out wstring outWstring);

    // fixed point
    typedef fixed<31, 2> fixedPt;
    fixedPt testFixedPt(in fixedPt inFixedPt,
                        inout fixedPt inoutFixedPt,
                        out fixedPt outFixedPt);    


    ////
    // constr_type_spec

    // struct
    struct struct1 {
        long struct1long;
        short struct1short;
    };

    struct struct2 {
        long struct2long;
        struct1 struct2struct;
    };
    struct1 testStruct(in struct1 inStruct1,
                       inout struct1 inoutStruct1,
                       out struct1 outStruct1);

    // union
    enum enum1 {e1_1,e1_2,e1_3,e1_4,e1_5,e1_6};
    union union1 switch (enum1) {
      case e1_1:
	long u1_1;
      case e1_2:
      case e1_3:
	string u1_2;
      default:
        short u1_3;
    };
    union1 testUnion(in union1 inUnion1,
                     inout union1 inoutUnion1,
                     out union1 outUnion1);

    // enum
    enum1 testEnum(in enum1 inEnum1,
                   inout enum1 inoutEnum1,
                   out enum1 outEnum1);

    typedef sequence <union1> unionSet;

    unionSet testUnionSet(in unionSet inUnionSet,
                          inout unionSet inoutUnionSet,
                          out unionSet outUnionSet);

    typedef sequence <struct2> structSet;
    typedef sequence <enum1> enumSet;
    typedef sequence <string> stringSet;

    union union2 switch(enum1) {
	    case e1_1: union1 u2_1;
		case e1_2: enum1 u2_2;
		case e1_3: unionSet u2_3;
		case e1_4: enumSet u2_4;
		case e1_5: stringSet u2_5;
		default: structSet u2_6;
	};

	union2 testUnionVariants(in union2 inUnion2,
	                         inout union2 inoutUnion2,
			  	             out union2 outUnion2);

    ////
    // const_type
//     const wchar wcharConst = L'x';
//     wcharConst testConst(in wcharConst inWcharConst,
//                          inout wcharConst inoutWcharConst,
//                          out wcharConst outWcharConst);

    // anonymous string
    string<4> testAnonString(in string<4> inAnonString,
                             inout string<4> inoutAnonString,
                             out string<4> outAnonString);

    // anonymous wide string
    wstring<4> testAnonWstring(in wstring<4> inAnonWstring,
                               inout wstring<4> inoutAnonWstring,
                               out wstring<4> outAnonWstring);

    struct RecursiveStruct {
        string name;
        sequence<RecursiveStruct> children;
    };

    union RecursiveUnion switch(short) {
        case 1:
            string case1;
        case 2:
            sequence<RecursiveUnion> case2;
        default:
            long caseDef;
    };

    // recursive struct
    RecursiveStruct testRecursiveStruct(in RecursiveStruct inStruct,
                                        inout RecursiveStruct inoutStruct,
                                        out RecursiveStruct outStruct);

    // recursive union
    RecursiveUnion testRecursiveUnion(in RecursiveUnion inUnion,
                                      inout RecursiveUnion inoutUnion,
                                      out RecursiveUnion outUnion);

};
