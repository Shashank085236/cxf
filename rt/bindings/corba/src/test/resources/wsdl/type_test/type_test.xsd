<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements. See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership. The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License. You may obtain a copy of the License at
 
  http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied. See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<schema
    xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:itst="http://tests.iona.com/ittests"
    xmlns:wsse="http://schemas.xmlsoap.org/ws/2003/06/secext"
    xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    xmlns:x1="http://apache.org/type_test/types1"
    xmlns:x2="http://apache.org/type_test/types2"
    xmlns:x3="http://apache.org/type_test/types3"
    elementFormDefault="qualified">

    <!-- For each type and element defined in this schema, the
	 type_test_wsdl stylesheet will generate a set of test
	 elements, test messages and an operation on the test port type.
	 -->

    <!-- itst:builtIn are not schema elements, they are directives for
	 our stylesheet to generate code for built-in types.
	 -->

    <!-- The schema elements are organized in several groups enclosed
         withing itst:it_test_group elements. Each group will be copied
         into its own xsd file, named after the value of the ID attribute
         of the group. Schema elements from groups with no ID attribute will
         appear directly inside type_test.wsdl. Elements from groups with
         an ID will appear in type_test_1.xsd, type_test_2.xsd, ..., type_test_<n>.xsd
         -->

    <!-- Add a itst:it_no_test="true" attribute for any xsd type or
         element that does not need to be tested directly (ie: part
         of a recursion chain, or base type to be reused by several
         types.
         -->

<itst:it_test_group>
         
    <itst:builtIn name="byte"          byValue="true" javaType="byte"    javaHolder="java.lang.Byte"/>
    <itst:builtIn name="short"         byValue="true" javaType="short"   javaHolder="java.lang.Short"/>
    <itst:builtIn name="int"           byValue="true" javaType="int"     javaHolder="java.lang.Integer"/>
    <itst:builtIn name="long"          byValue="true" javaType="long"    javaHolder="java.lang.Long"/>
    <itst:builtIn name="unsignedShort" byValue="true" javaType="int"     javaHolder="java.lang.Integer"/>
    <itst:builtIn name="unsignedInt"   byValue="true" javaType="long"    javaHolder="java.lang.Long"/>
    <itst:builtIn name="unsignedLong"  byValue="true" javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="float"         byValue="true" javaType="float"   javaHolder="java.lang.Float"/>
    <itst:builtIn name="double"        byValue="true" javaType="double"  javaHolder="java.lang.Double"/>
    <itst:builtIn name="unsignedByte"  byValue="true" javaType="short"   javaHolder="java.lang.Short"/>
    <itst:builtIn name="boolean"       byValue="true" javaType="boolean" javaHolder="java.lang.Boolean"/>
    <itst:builtIn name="string"                       javaType="String"  javaHolder="java.lang.String"/>
    <itst:builtIn name="QName"                        javaType="javax.xml.namespace.QName" javaHolder="javax.xml.namespace.QName"/>

    <itst:builtIn name="integer"                      javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="positiveInteger"              javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="nonPositiveInteger"           javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="negativeInteger"              javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="nonNegativeInteger"           javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="decimal"                      javaType="java.math.BigDecimal" javaHolder="java.math.BigDecimal"/>
    
    <itst:builtIn name="date"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="dateTime"                     javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="time"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gYear"                        javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gYearMonth"                   javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gMonth"                       javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gMonthDay"                    javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gDay"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="duration" javaType="javax.xml.datatype.Duration" javaHolder="javax.xml.datatype.Duration"/>
    <itst:builtIn name="anyURI"   javaType="java.lang.String" javaHolder="java.lang.String"/>
    <itst:builtIn name="normalizedString"             javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="token"                        javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="language"                     javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="NMTOKEN"                      javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="Name"                         javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="NCName"                       javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="ID"                           javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="base64Binary"  javaType="byte[]" javaHolder="byte[]"/>
    <itst:builtIn name="hexBinary"     javaType="byte[]" javaHolder="byte[]"/>

  </itst:it_test_group>

  <itst:it_test_group ID="1">

    <!-- Nillable elements
    <element name="NillableString" type="string" nillable="true"/>
    -->
    <element name="NillableStruct" type="x1:SimpleStruct" nillable="true"/>

    <!-- Complex Types -->

    <complexType name="StructWithNillables">
        <sequence>
            <element name="varFloat" nillable="true" type="float"/>
            <element name="varInt" nillable="true" type="int"/>
            <element name="varString" nillable="true" type="string"/>
            <element name="varStruct" nillable="true" type="x1:SimpleStruct"/>
        </sequence>
    </complexType>

    <complexType name="EmptyStruct">
        <sequence/>
    </complexType>

    <complexType name="SimpleStruct">
        <sequence>
            <element name="varFloat" type="double"/>
            <element name="varInt" type="unsignedLong"/>
            <element name="varString" type="string" minOccurs="0"/>
        </sequence>
        <!-- attribute name="varAttrString" type="string"/ -->
    </complexType>
    <complexType name="NestedStruct">
        <sequence>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varFloat" type="decimal"/>
            <element name="varEmptyStruct" type="x1:EmptyStruct"/>
            <element name="varStruct" type="x1:SimpleStruct"/>
        </sequence>
    </complexType>
    <complexType name="AnonymousStruct">
        <sequence>
            <element name="varFloat" type="float"/>
            <sequence>
                <element name="varInt" type="int"/>
                <element name="varString" type="string"/>
            </sequence>
        </sequence>
    </complexType>
    <complexType name="FixedArray">
        <sequence>
            <element maxOccurs="3" minOccurs="3" name="item" type="int"/>
        </sequence>
    </complexType>
    <complexType name="UnboundedArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="item"
		     type="string"/>
        </sequence>
    </complexType>
    <complexType name="BoundedArray">
        <sequence>
            <element maxOccurs="3" minOccurs="1" name="item" type="float"/>
        </sequence>
    </complexType>
    <complexType name="CompoundArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="array1"
		     type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="array2"
		     type="string"/>
        </sequence>
    </complexType>
    <complexType name="NestedArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="subarray"
		     type="x1:UnboundedArray"/>
        </sequence>
    </complexType>

    <!-- Simple types -->
    
    <!-- enumerations -->
    
    <simpleType name="ColourEnum">
        <restriction base="string">
            <enumeration value="RED"/>
            <enumeration value="GREEN"/>
            <enumeration value="BLUE"/>
        </restriction>
    </simpleType>
    <simpleType name="SimpleEnum">
        <restriction base="string">
            <enumeration value="abc"/>
            <enumeration value="def"/>
            <enumeration value="ghi"/>
        </restriction>
    </simpleType>
    <simpleType name="NMTokenEnum">
        <restriction base="NMTOKEN">
            <enumeration value="hello"/>
            <enumeration value="there"/>
        </restriction>
    </simpleType>

    <complexType name="EmptyChoice">
        <choice/>
    </complexType>

    <complexType name="SimpleChoice">
        <choice>
            <element name="varFloat" type="float"/>
            <element name="varInt" type="int"/>
            <element name="varString" type="string"/>
        </choice>
        <!--CORBA MAPPING BROKEN-->
        <!--attribute name="varAttrString" type="string"/-->
    </complexType>

    <!-- AllComplexType types -->
    <complexType name="EmptyAll">
        <all/>
    </complexType>

    <complexType name="SimpleAll">
        <all>
            <element name="varFloat" type="float"/>
            <element name="varInt" type="int"/>
            <element name="varString" type="string" minOccurs="0"/>
        </all>
        <attribute name="varAttrString" type="string"/>
    </complexType>

    <complexType name="BinaryStruct">
        <sequence>
            <element name="varBinary" type="hexBinary"/>
        </sequence>
    </complexType>

    <complexType name="BinaryChoice">
        <choice>
            <element name="varString" type="string"/>
            <element name="varBinary" type="hexBinary"/>
        </choice>
    </complexType>

    <complexType name="StructWithChoice">
        <sequence>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varChoice" type="x1:SimpleChoice"/>
        </sequence>
    </complexType>

    <complexType name="ArrayWithChoice">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="subarray"
		     type="x1:SimpleChoice"/>
        </sequence>
    </complexType>

    <complexType name="StructWithEnum">
        <sequence>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varEnum" type="x1:SimpleEnum"/>
        </sequence>
    </complexType>

    <complexType name="ChoiceWithEnum">
        <choice>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varEnum" type="x1:SimpleEnum"/>
        </choice>
    </complexType>

    <complexType name="ChoiceWithStruct">
        <choice>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varEmptyStruct" type="x1:EmptyStruct"/>	
            <element name="varStruct" type="x1:SimpleStruct"/>
        </choice>
    </complexType>

    <complexType name="SequenceStructChoice">
        <choice>
            <element name="varString" type="string"/>
            <element name="varSequence" type="x1:NestedArray"/>
            <element name="varStruct" type="x1:NestedStruct"/>
        </choice>
    </complexType>

    <complexType name="SequenceChoiceStruct">
        <sequence>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varSequence" type="x1:NestedArray"/>
            <element name="varChoice" type="x1:SimpleChoice"/>
        </sequence>
    </complexType>

  </itst:it_test_group>
</schema>

