<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="http://objectweb.org/type_test"
	xmlns="http://www.w3.org/2001/XMLSchema"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:tns="http://objectweb.org/type_test"
        xmlns:itst="http://tests.iona.com/ittests"
	xmlns:wsse="http://schemas.xmlsoap.org/ws/2003/06/secext"
	elementFormDefault="qualified">

    <!-- For each type and element defined in this schema, the
	 type_test_wsdl stylesheet will generate a set of test
	 elements, test messages and an operation on the test port type.
	 -->

    <!-- itst:builtIn are not schema elements, they are directives for
	 our stylesheet to generate code for built-in types.
	 -->

    <!-- The schema elements are organized in several groups enclosed
         withing itst:it_test_group elements. Each group will be copied
         into its own xsd file, named after the value of the ID attribute
         of the group. Schema elements from groups with no ID attribute will
         appear directly inside type_test.wsdl. Elements from groups with
         an ID will appear in type_test_1.xsd, type_test_2.xsd, ..., type_test_<n>.xsd
         -->

    <!-- Add a itst:it_no_test="true" attribute for any xsd type or
         element that does not need to be tested directly (ie: part
         of a recursion chain, or base type to be reused by several
         types.
         -->

<itst:it_test_group>
         
    <itst:builtIn name="byte"          byValue="true" javaType="byte"    javaHolder="java.lang.Byte"/>
    <itst:builtIn name="short"         byValue="true" javaType="short"   javaHolder="java.lang.Short"/>
    <itst:builtIn name="int"           byValue="true" javaType="int"     javaHolder="java.lang.Integer"/>
    <itst:builtIn name="long"          byValue="true" javaType="long"    javaHolder="java.lang.Long"/>
    <itst:builtIn name="unsignedShort" byValue="true" javaType="int"     javaHolder="java.lang.Integer"/>
    <itst:builtIn name="unsignedInt"   byValue="true" javaType="long"    javaHolder="java.lang.Long"/>
    <itst:builtIn name="unsignedLong"  byValue="true" javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="float"         byValue="true" javaType="float"   javaHolder="java.lang.Float"/>
    <itst:builtIn name="double"        byValue="true" javaType="double"  javaHolder="java.lang.Double"/>
    <itst:builtIn name="unsignedByte"  byValue="true" javaType="short"   javaHolder="java.lang.Short"/>
    <itst:builtIn name="boolean"       byValue="true" javaType="boolean" javaHolder="java.lang.Boolean"/>
    <itst:builtIn name="string"                       javaType="String"  javaHolder="java.lang.String"/>
    <itst:builtIn name="QName"                        javaType="javax.xml.namespace.QName" javaHolder="javax.xml.namespace.QName"/>

    <itst:builtIn name="integer"                      javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="positiveInteger"              javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="nonPositiveInteger"           javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="negativeInteger"              javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="nonNegativeInteger"           javaType="java.math.BigInteger" javaHolder="java.math.BigInteger"/>
    <itst:builtIn name="decimal"                      javaType="java.math.BigDecimal" javaHolder="java.math.BigDecimal"/>
    
    <itst:builtIn name="date"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="dateTime"                     javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="time"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gYear"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gYearMonth"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gMonth"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gMonthDay"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
    <itst:builtIn name="gDay"                         javaType="javax.xml.datatype.XMLGregorianCalendar" javaHolder="javax.xml.datatype.XMLGregorianCalendar"/>
<!-- XXX  anyURI
    <itst:builtIn name="anyURI"                       javaType="java.net.URI"       javaHolder="java.net.URI"/>
-->
    <itst:builtIn name="normalizedString"             javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="token"                        javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="language"                     javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="NMTOKEN"                      javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="NMTOKENS"                     javaType="java.util.List&#x3c;java.lang.String&#x3e;" javaHolder="java.util.List&#x3c;java.lang.String&#x3e;"/>
    <itst:builtIn name="Name"                         javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="NCName"                       javaType="java.lang.String"             javaHolder="java.lang.String"/>
    <itst:builtIn name="ID"                           javaType="java.lang.String"             javaHolder="java.lang.String"/>
    
    <!--itst:builtIn prefix="ref:" name="Reference" cxxType="Reference" javaType="com.iona.schemas.references.Reference" javaHolder="com.iona.test.type_test.holders.ReferenceHolder"/-->
    <itst:builtIn name="base64Binary"  javaType="byte[]" javaHolder="byte[]" XXX="x.xml.rpc.holders.ByteArrayHolder"/>
    <itst:builtIn name="hexBinary"     javaType="byte[]" javaHolder="byte[]" XXX="ArrayHolder"/>

  </itst:it_test_group>
  <itst:it_test_group ID="1">

    <!-- Nillable elements -->
    <element name="NillableString" type="string" nillable="true"/>
    <element name="NillableStruct" type="tns:SimpleStruct" nillable="true"/>

    <!-- Anonymous type elements -->
    <element name="AnonTypeElement">
        <complexType>
            <sequence>
                <element name="varFloat" type="float"/>
                <element name="varInt" type="int"/>
                <element name="varString" type="string"/>
            </sequence>
        </complexType>
    </element>

    <!-- Any Elements -->
    <element itst:it_no_test="true" name="StringElementQualified" form="qualified" type="xsd:string" />
    <element itst:it_no_test="true" name="AnonTypeElementQualified" form="qualified">
        <complexType>
            <sequence>
                <element name="varFloat" type="float"/>
                <element name="varInt" type="int"/>
                <element name="varString" type="string"/>
            </sequence>
        </complexType>
    </element>

    <!-- Complex Types -->

    <complexType name="StructWithNillables">
        <sequence>
            <element name="varFloat" nillable="true" type="float"/>
            <element name="varInt" nillable="true" type="int"/>
            <element name="varString" nillable="true" type="string"/>
            <element name="varStruct" nillable="true" type="tns:SimpleStruct"/>
        </sequence>
    </complexType>

    <complexType name="EmptyStruct">
        <sequence/>
    </complexType>

    <complexType name="SimpleStruct">
        <sequence>
            <element name="varFloat" type="double"/>
            <element name="varInt" type="unsignedLong"/>
            <element name="varString" type="string"/>
        </sequence>
        <attribute name="varAttrString" type="string"/>
    </complexType>
    <complexType name="NestedStruct">
        <sequence>
            <element name="varString" type="string"/>
            <element name="varInt" type="int"/>
            <element name="varFloat" type="decimal"/>
            <element name="varEmptyStruct" type="tns:EmptyStruct"/>
            <element name="varStruct" type="tns:SimpleStruct"/>
        </sequence>
    </complexType>
    <complexType name="AnonymousStruct">
        <sequence>
            <element name="varFloat" type="float"/>
            <sequence>
                <element name="varInt" type="int"/>
                <element name="varString" type="string"/>
            </sequence>
        </sequence>
    </complexType>
    <!-- XXX - Causes eclipse warning
    <complexType name="AnonymousType">
        <sequence>
            <element name="foo">
                <complexType>
                    <sequence>
                        <element name="foo" type="string"/>
                        <element name="bar" type="string"/>
                    </sequence>
                </complexType>
            </element>
        </sequence>
    </complexType>
    -->
    <complexType name="FixedArray">
        <sequence>
            <element maxOccurs="3" minOccurs="3" name="item" type="int"/>
        </sequence>
    </complexType>
    <complexType name="UnboundedArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="item"
		     type="string"/>
        </sequence>
    </complexType>
    <complexType name="BoundedArray">
        <sequence>
            <element maxOccurs="3" minOccurs="1" name="item" type="float"/>
        </sequence>
    </complexType>
    <complexType name="CompoundArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="array1"
		     type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="array2"
		     type="string"/>
        </sequence>
    </complexType>
    <complexType name="NestedArray">
        <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="subarray"
		     type="tns:UnboundedArray"/>
        </sequence>
    </complexType>

    <!-- Simple types -->
    
    <simpleType name="ColourEnum">
        <restriction base="string">
            <enumeration value="RED"/>
            <enumeration value="GREEN"/>
            <enumeration value="BLUE"/>
        </restriction>
    </simpleType>
    <simpleType name="NumberEnum">
        <restriction base="int">
            <enumeration value="1"/>
            <enumeration value="2"/>
            <enumeration value="3"/>
        </restriction>
    </simpleType>
    <simpleType name="ShortEnum">
        <restriction base="short">
            <enumeration value="-1"/>
            <enumeration value="2"/>
            <enumeration value="-3"/>
        </restriction>
    </simpleType>
    <simpleType name="StringEnum">
        <restriction base="string">
            <enumeration value="a b c"/>
            <enumeration value="d e f"/>
            <enumeration value="g h i"/>
        </restriction>
    </simpleType>
    <simpleType name="DecimalEnum">
        <restriction base="decimal">
            <enumeration value="-10.34"/>
            <enumeration value="11.22"/>
            <enumeration value="14.55"/>
        </restriction>
    </simpleType>
    <simpleType name="QNameBaseEnum">
        <restriction base="QName">
            <enumeration value="wsse:UnsupportedSecurityToken"/>
            <enumeration value="wsse:UnsupportedAlgorithm"/>
            <enumeration value="wsse:InvalidSecurity"/>
            <enumeration value="wsse:InvalidSecurityToken"/>
            <enumeration value="wsse:FailedAuthentication"/>
            <enumeration value="wsse:FailedCheck"/>
            <enumeration value="wsse:SecurityTokenUnavailable"/>
        </restriction>
    </simpleType>
    <simpleType name="NMTokenEnum">
        <restriction base="NMTOKEN">
            <enumeration value="hello"/>
            <enumeration value="there"/>
        </restriction>
    </simpleType>
    <simpleType name="DateTimeEnum">
        <restriction base="dateTime">
            <enumeration value="2005-01-01T12:00:00Z"/>
            <enumeration value="2005-07-01T12:00:00Z"/>
        </restriction>
    </simpleType>
    <simpleType name="DateEnum">
        <restriction base="date">
            <enumeration value="2005-01-01Z"/>
            <enumeration value="2005-07-01Z"/>
        </restriction>
    </simpleType>
<!-- XXX  anyURI
    <simpleType name="AnyURIEnum">
        <restriction base="anyURI">
            <enumeration value="http://www.iona.com"/>
            <enumeration value="http://www.google.com"/>
        </restriction>
    </simpleType>
-->
    <simpleType name="HexBinaryEnum">
        <restriction base="hexBinary">
            <enumeration value="hello"/>
            <enumeration value="there"/>
        </restriction>
    </simpleType>
    
    <!-- facet (length, maxLength & minLength) support -->

    <simpleType name="SimpleRestriction">
      <restriction base="string">
        <maxLength value="10"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleRestriction2">
      <restriction base="string">
        <minLength value="5"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleRestriction3">
      <restriction base="string">
        <maxLength value="10"/>
        <minLength value="5"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleRestriction4">
      <restriction base="string">
        <length value="1"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleRestriction5">
      <restriction base="tns:SimpleRestriction">
        <minLength value="5"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleRestriction6">
      <restriction base="tns:SimpleRestriction">
        <maxLength value="5"/>
      </restriction>
    </simpleType>

<!-- XXX  anyURI
    <simpleType name="AnyURIRestriction">
      <restriction base="anyURI">
        <maxLength value="50"/>
      </restriction>
    </simpleType>
-->

    <simpleType name="HexBinaryRestriction">
      <restriction base="hexBinary">
        <maxLength value="10"/>
        <minLength value="1"/>
      </restriction>
    </simpleType>

    <simpleType name="Base64BinaryRestriction">
      <restriction base="base64Binary">
        <length value="10"/>
      </restriction>
    </simpleType>

    <simpleType name="SimpleListRestriction2">
      <restriction base="tns:StringList">
        <maxLength value="10"/>
        <minLength value="1"/>
      </restriction>
    </simpleType>

    <complexType name="ComplexRestriction">
      <simpleContent>
        <restriction base="string">
	  <maxLength value="10"/>
	  <minLength value="5"/>
        </restriction>
      </simpleContent>
    </complexType>

    <complexType name="ComplexRestriction2">
      <simpleContent>
        <restriction base="string">
          <length value="10"/>
        </restriction>
      </simpleContent>
    </complexType>

    <complexType name="ComplexRestriction3">
      <simpleContent>
        <restriction base="tns:SimpleRestriction">
          <minLength value="5"/>
        </restriction>
      </simpleContent>
    </complexType>

    <complexType name="ComplexRestriction4">
      <simpleContent>
        <restriction base="tns:SimpleRestriction">
          <maxLength value="5"/>
        </restriction>
      </simpleContent>
    </complexType>

<!-- XXX  anyURI
    <complexType name="ComplexRestriction5">
      <simpleContent>
        <restriction base="tns:AnyURIRestriction">
          <minLength value="5"/>
        </restriction>
      </simpleContent>
    </complexType>
-->
    <!-- list simple types -->

    <simpleType name="StringList">
        <list itemType="string"/>
    </simpleType>
    <simpleType name="NumberList">
        <list itemType="int"/>
    </simpleType>
    <simpleType name="QNameList">
        <list itemType="QName"/>
    </simpleType>
    <simpleType name="ShortEnumList">
        <list itemType="tns:ShortEnum"/>
    </simpleType>

    <simpleType name="AnonEnumList">
        <list>
            <simpleType>
                <restriction base="short">
                    <enumeration value="10"/>
                    <enumeration value="100"/>
                    <enumeration value="1000"/>
                </restriction>
            </simpleType>
        </list>
    </simpleType>

    <!-- list simple types with union -->

    <simpleType name="SimpleUnionList">
        <list itemType="tns:SimpleUnion"/>
    </simpleType>

    <simpleType name="AnonUnionList">
        <list>
            <simpleType>
                <union memberTypes="negativeInteger">
                    <simpleType>
                        <restriction base="positiveInteger"/>
                    </simpleType>
                </union>
            </simpleType>
        </list>
    </simpleType>

    <!-- list simple type as attribute -->

    <complexType name="StructWithList">
        <sequence>
            <element name="varList" type="tns:StringList"/>
        </sequence>
        <attribute name="attribList" type="tns:NumberList"/>
    </complexType>

    <!-- list simple type as complex simple content -->

    <complexType name="ListSimpleContent">
        <simpleContent>
            <extension base="tns:ShortEnumList"/>
        </simpleContent>
    </complexType>

    <!-- union simple types -->

    <simpleType name="SimpleUnion">
        <union memberTypes="positiveInteger">
            <simpleType>
                <restriction base="negativeInteger"/>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="UnionWithAnonEnum">
        <union memberTypes="int">
            <simpleType>
                <restriction base="string">
                    <enumeration value="n/a"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <!-- union simple type with list members -->

    <simpleType name="UnionWithStringList">
        <union memberTypes="int tns:StringList"/>
    </simpleType>

    <simpleType name="UnionWithStringListRestriction">
        <union memberTypes="int">
            <simpleType>
                <restriction base="tns:StringList"/>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="UnionWithAnonList">
        <union memberTypes="int">
            <simpleType>
                <list itemType="float"/>
            </simpleType>
        </union>
    </simpleType>

    <!-- union simple types with union members -->

    <simpleType name="UnionWithUnion">
        <union memberTypes="tns:SimpleUnion">
            <simpleType>
                <restriction base="int">
                    <enumeration value="0"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="UnionWithUnionRestriction">
        <union>
            <simpleType>
                <restriction base="tns:SimpleUnion"/>
            </simpleType>
            <simpleType>
                <restriction base="int">
                    <enumeration value="0"/>
                </restriction>
            </simpleType>
        </union>
    </simpleType>

    <simpleType name="UnionWithAnonUnion">
        <union memberTypes="int">
            <simpleType>
                <union memberTypes="float string"/>
            </simpleType>
        </union>
    </simpleType>

    <!-- union simple type as attribute -->

    <complexType name="StructWithUnion">
        <sequence>
            <element name="varUnion" type="tns:SimpleUnion"/>
        </sequence>
        <attribute name="attribUnion" type="tns:SimpleUnion"/>
    </complexType>

    <!-- union simple type as complex simple content -->

    <complexType name="UnionSimpleContent">
        <simpleContent>
            <extension base="tns:SimpleUnion"/>
        </simpleContent>
    </complexType>

    <!-- sequence, choice and all -->

    <complexType name="EmptyChoice">
        <choice/>
    </complexType>

    <complexType name="SimpleChoice">
        <choice>
            <element name="varFloat" type="float"/>
            <element name="varInt" type="int"/>
            <element name="varString" type="string"/>
        </choice>
        <!--CORBA MAPPING BROKEN-->
        <!--attribute name="varAttrString" type="string"/-->
    </complexType>

    <!-- AllComplexType types -->
    <complexType name="EmptyAll">
        <all/>
    </complexType>

    <complexType name="SimpleAll">
        <all>
            <element name="varFloat" type="float"/>
            <element name="varInt" type="int"/>
            <element name="varString" type="string"/>
        </all>
        <attribute name="varAttrString" type="string"/>
    </complexType>

    <!-- BUG #6761 -->
    <complexType name="OccuringAll">
        <all minOccurs="0" maxOccurs="1">
            <element name="varInt" type="int"/>
        </all>
        <attribute name="varAttrString" type="string"/>
    </complexType>

    <complexType name="StructWithOptionals">
        <sequence>
            <element maxOccurs="1" minOccurs="0" name="varFloat" type="float"/>
            <element maxOccurs="1" minOccurs="0" name="varInt" type="int"/>
            <element maxOccurs="1" minOccurs="0" name="varString"
		     type="string"/>
            <element maxOccurs="1" minOccurs="0" name="varStruct"
		     type="tns:SimpleStruct"/>
        </sequence>
    </complexType>

    <!--Recusive Data Types-->
    <!--One Level Recursion Using Sequence-->
    <complexType name="RecursiveStruct">
        <sequence>
            <element name="varString" type="xsd:string"/>
            <element name="varInt" type="xsd:int"/>
            <element name="varFloat" type="xsd:float"/>
            <element name="varStructArray" type="tns:RecursiveStructArray"/>
            <!--WSDLTOCORBA Bug 4086-->
            <!--
		 <element name="varStructArray">
		     <complexType name="RecursiveStructArray">
			 <sequence>
			     <element name="item" type="tns:RecursiveStruct" minOccurs="0" maxOccurs="unbounded"/>
			 </sequence>
		     </complexType>
		 </element>
		 -->
        </sequence>
    </complexType>
    <complexType name="RecursiveStructArray">
        <sequence>
            <element name="item" type="tns:RecursiveStruct" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <!--Two Level Recursion Using Choice-->
    <complexType name="RecursiveUnion">
        <choice>
            <element name="varChoice" type="tns:RecursiveUnionData"/>
            <!--WSDLTOCORBA Bug 4086-->
            <!--
		 <element name="varChoice">
		     <complexType name="RecursiveUnionData">
			 <sequence>
			     <element name="varInt" type="xsd:int"/>
			     <element name="varChoiceArray">
				 <complexType name="ChoiceArray">
				     <sequence>
					 <element name="item" type="tns:RecursiveUnion" minOccurs="0" maxOccurs="unbounded"/>
				     </sequence>
				 </complexType>
			     </element>
			 </sequence>
		     </complexType>
		 </element>
		 -->
            <element name="varString" type="xsd:string"/>
        </choice>
    </complexType>
    <complexType name="RecursiveUnionData">
        <sequence>
            <element name="varInt" type="xsd:int"/>
            <element name="varChoiceArray" type="tns:ChoiceArray"/>
            <!--WSDLTOCORBA Bug 4086-->
            <!--
		 <element name="varChoiceArray">
		     <complexType name="ChoiceArray">
			 <sequence>
			     <element name="item" type="tns:RecursiveUnion" minOccurs="0" maxOccurs="unbounded"/>
			 </sequence>
		     </complexType>
		 </element>
		 -->
        </sequence>
    </complexType>
    <complexType name="ChoiceArray">
        <sequence>
            <element name="item" type="tns:RecursiveUnion" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <!-- Bug 6918 - Type occurence and recursions -->
<!-- 
     Generated code won't build on AIX.
     Disabled until definition of class mapping and reflection types
     can be reordered
    <complexType name="RecSeqB6918">
        <sequence minOccurs="0" maxOccurs="unbounded">
            <element name="nextSeq" type="tns:RecSeqB6918" minOccurs="0"/>
            <element name="varInt" type="int"/>
        </sequence>
    </complexType>
-->
    <!-- SimpleContent types -->

    <complexType name="ExtendsSimpleType">
	<simpleContent>
	    <extension base="xsd:string"/>
	</simpleContent>
    </complexType>

    <complexType name="ExtendsSimpleContent">
	<simpleContent>
	    <extension base="tns:ExtendsSimpleType"/>
	</simpleContent>
    </complexType>

    <complexType name="SimpleContent1">
	<simpleContent>
	    <extension base="xsd:string">
                <attribute name="attrib1a" type="xsd:byte"/>
	        <attribute name="attrib1b" type="xsd:short"/>
            </extension>
	</simpleContent>
    </complexType>

    <complexType name="SimpleContent2">
	<simpleContent>
	    <extension base="tns:SimpleContent1">
                <attribute name="attrib2a" type="xsd:int"/>
		<attribute name="attrib2b" type="xsd:long"/>
            </extension>
	</simpleContent>
    </complexType>

    <complexType name="SimpleContent3">
	<simpleContent>
	    <extension base="tns:SimpleContent2">
                <attribute name="attrib3a" type="xsd:string"/>
		<attribute name="attrib3b" type="xsd:boolean"/>
            </extension>
	</simpleContent>
    </complexType>

    <complexType name="Document">
        <simpleContent>
            <extension base="string">
                <attribute name="ID" type="string"/>
            </extension>
        </simpleContent>
    </complexType>

    <complexType name="ExtColourEnum">
        <simpleContent>
            <extension base="tns:ColourEnum">
                <attribute name="attrib1" use="optional" type="xsd:int"/>
		<attribute name="attrib2" use="optional">
		    <simpleType>
			<restriction base="xsd:string">
			    <maxLength value="2"/>
			</restriction>
		    </simpleType>
		</attribute>
		<attribute name="attrib3" use="optional">
		    <simpleType>
			<list itemType="string"/>
		    </simpleType>
		</attribute>
            </extension>
        </simpleContent>
    </complexType>

    <!-- ComplexContent types -->
    <complexType name="DerivedStruct_BaseStruct">
        <complexContent mixed="false">
            <extension base="tns:SimpleStruct">
                <sequence>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </sequence>
                <attribute name="attrString1" type="string"/>
		<attribute name="attrString2" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedStruct_BaseChoice">
        <complexContent mixed="false">
            <extension base="tns:SimpleChoice">
                <sequence>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </sequence>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedStruct_BaseAll">
        <complexContent mixed="false">
            <extension base="tns:SimpleAll">
                <sequence>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </sequence>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedChoice_BaseStruct">
        <complexContent mixed="false">
            <extension base="tns:SimpleStruct">
                <choice>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </choice>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedChoice_BaseChoice">
        <complexContent mixed="false">
            <extension base="tns:SimpleChoice">
                <choice>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </choice>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedChoice_BaseAll">
        <complexContent mixed="false">
            <extension base="tns:SimpleAll">
                <choice>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </choice>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedAll_BaseStruct">
        <complexContent mixed="false">
            <extension base="tns:SimpleStruct">
                <all>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </all>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedAll_BaseChoice">
        <complexContent mixed="false">
            <extension base="tns:SimpleChoice">
                <all>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </all>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedAll_BaseAll">
        <complexContent mixed="false">
            <extension base="tns:SimpleAll">
                <all>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </all>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedChoice_BaseComplex">
        <complexContent mixed="false">
            <extension base="tns:DerivedAll_BaseStruct">
                <choice>
                    <element name="varStringExtExt" type="string"/>
                    <element name="varFloatExtExt" type="float"/>
                </choice>
                <attribute name="attrStringExtExt" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedChoice_BaseArray">
        <complexContent mixed="false">
            <extension base="tns:UnboundedArray">
                <choice>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </choice>
                <attribute name="attrStringExt" type="string"/>
            </extension>
        </complexContent>
    </complexType>
<!--
    TODO - XXX javatowsdl doesn't like this one.  Disabled it for now.
    <complexType name="DerivedChoice_BaseSimpleContent">
        <complexContent mixed="false">
            <extension base="tns:Document">
                <choice>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </choice>
                <attribute name="attrStringExt" type="string"/>
            </extension>
        </complexContent>
    </complexType>
-->
    <complexType name="DerivedNoContent">
        <complexContent mixed="false">
            <extension base="tns:SimpleStruct">
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedStruct_BaseEmpty">
        <complexContent mixed="false">
            <extension base="tns:EmptyStruct">
                <sequence>
                    <element name="varStringExt" type="string"/>
                    <element name="varFloatExt" type="float"/>
                </sequence>
                <attribute name="attrString" type="string"/>
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedEmpty_BaseEmptyAll">
        <complexContent mixed="false">
            <extension base="tns:EmptyAll">
            </extension>
        </complexContent>
    </complexType>
    <complexType name="DerivedEmpty_BaseEmptyChoice">
        <complexContent mixed="false">
            <extension base="tns:EmptyChoice">
            </extension>
        </complexContent>
    </complexType>
    <complexType name="ComplexStruct">
        <sequence>
            <element name="varFloat" type="float"/>
            <element name="varDerivedStruct" type="tns:DerivedChoice_BaseComplex"/>
        </sequence>
    </complexType>
    <complexType name="ComplexChoice">
        <choice>
            <element name="varFloat" type="float"/>
            <element name="varDerivedStruct" type="tns:DerivedChoice_BaseComplex"/>
        </choice>
    </complexType>
    <complexType name="ComplexArray">
        <sequence>
            <element name="varDerivedItem" nillable="true" minOccurs="2" maxOccurs="2" type="tns:DerivedAll_BaseStruct"/>
        </sequence>
    </complexType>

    <!-- ComplexContentRestriction types -->
    <complexType name="RestrictedStruct_BaseStruct">
        <complexContent>
            <restriction base="tns:SimpleStruct">
                <sequence>
                    <element name="varFloat" type="double"/>
                    <element name="varInt" type="unsignedLong"/>                    
                </sequence>                
                <attribute name="varAttrString" type="string"/>
            </restriction>
        </complexContent>
    </complexType>
    <complexType name="RestrictedAll_BaseAll">
        <complexContent mixed="false">
            <restriction base="tns:SimpleAll">
                <all>
                    <element name="varFloat" type="float"/>
                    <element name="varInt" type="int"/>
                </all>    
                <attribute name="varAttrString" type="string"/>
            </restriction>
        </complexContent>
    </complexType>
    <complexType name="RestrictedChoice_BaseChoice">
        <complexContent mixed="false">
            <restriction base="tns:SimpleChoice">
                <choice>
                    <element name="varFloat" type="float"/>
                    <element name="varInt" type="int"/>
                </choice>                
            </restriction>
        </complexContent>
    </complexType>

  </itst:it_test_group>
  <itst:it_test_group ID="2">
  
    <!-- Attribute Groups -->

    <attributeGroup name="AttrGrp">
      <attribute name="attrInt" type="integer"/>
      <attribute name="attrString" type="string"/>
    </attributeGroup>

    <attributeGroup name="AttrGrp1">
      <attribute name="attrFloat" type="float"/>
      <attributeGroup ref="tns:AttrGrp"/>
    </attributeGroup>

    <complexType name="ComplexTypeWithAttributeGroup">
      <sequence/>
      <attributeGroup ref="tns:AttrGrp"/>
    </complexType>

    <complexType name="ComplexTypeWithAttributeGroup1">
      <sequence/>
      <attributeGroup ref="tns:AttrGrp1"/>
    </complexType>

    <!-- Groups -->

    <group name="BatchElementsSeq">
        <sequence>
	    <element name="varFloat" type="xsd:float"/>
	    <element name="varInt" type="xsd:int"/>
	    <element name="varString" type="xsd:string"/>
        </sequence>
    </group>

    <group name="BatchElementsChoice">
        <choice>
	    <element name="varFloat" type="xsd:float"/>
	    <element name="varInt" type="xsd:int"/>
	    <element name="varString" type="xsd:string"/>
        </choice>
    </group>

    <complexType name="SequenceWithGroupSeq">
        <sequence>
            <group ref="tns:BatchElementsSeq"/>
            <group ref="tns:BatchElementsSeq"/>
        </sequence>
    </complexType>

    <complexType name="SequenceWithGroupChoice">
        <sequence>
            <group ref="tns:BatchElementsChoice"/>
            <group ref="tns:BatchElementsChoice"/>
        </sequence>
    </complexType>

    <complexType name="SequenceWithGroups">
        <sequence>
            <group ref="tns:BatchElementsSeq"/>
            <group ref="tns:BatchElementsChoice"/>
        </sequence>
    </complexType>

    <!-- BUG #6759 -->
    <complexType name="SequenceWithOccuringGroup">
        <sequence>
            <group ref="tns:BatchElementsSeq" minOccurs="0" maxOccurs="3"/>
        </sequence>
    </complexType>
    
    <complexType name="ChoiceWithGroupSeq">
        <choice>
            <group ref="tns:BatchElementsSeq"/>
            <group ref="tns:BatchElementsSeq"/>
        </choice>
    </complexType>

    <complexType name="ChoiceWithGroupChoice">
        <choice>
            <group ref="tns:BatchElementsChoice"/>
            <group ref="tns:BatchElementsChoice"/>
        </choice>
    </complexType>

    <complexType name="ChoiceWithGroups">
        <choice>
            <group ref="tns:BatchElementsSeq"/>
            <group ref="tns:BatchElementsChoice"/>
        </choice>
    </complexType>

    <!-- Bug 6496: group ref directly under complexType -->
    <complexType name="GroupDirectlyInComplexType">
        <group ref="tns:BatchElementsSeq"/>
        <attribute name="attr1" type="xsd:int" />
    </complexType>

    <!-- Bug 3743: Choices with Anonymous Sequence -->
    <complexType name="ChoiceOfSeq">
        <choice>
            <sequence>
	        <element name="varFloat" type="xsd:float"/>
	        <element name="varInt" type="xsd:int"/>
            </sequence>
            <sequence>
	        <element name="varInt" type="xsd:int"/>
	        <element name="varString" type="xsd:string"/>
            </sequence>
        </choice>
    </complexType>

    <!-- Bug 3743: Choices with Anonymous Choice -->
    <complexType name="ChoiceOfChoice">
        <choice>
            <choice>
	        <element name="varFloat" type="xsd:float"/>
	        <element name="varInt" type="xsd:int"/>
            </choice>
            <choice>
	        <element name="varInt" type="xsd:int"/>
	        <element name="varString" type="xsd:string"/>
            </choice>
        </choice>
    </complexType>

    <!-- Complex type with only attributes -->
    <complexType name="ComplexTypeWithAttributes">
      <attribute name="attrInt" type="integer"/>
      <attribute name="attrString" type="string"/>
    </complexType>

    <!-- Attribute ref -->
    <!-- BUG #6763
    <attribute itst:it_no_test="true" name="globalAttrInt" type="int"/>
    <attribute itst:it_no_test="true" name="globalAttrString" type="string"/>
    <complexType name="ComplexTypeWithAttributeRef">
        <attribute ref="tns:globalAttrInt"/>
        <attribute ref="tns:globalAttrString"/>
    </complexType>
    -->

    <!-- Types containing <any> -->
    <complexType name="StructWithAny">
        <sequence>
            <element name="name" type="string"/>
            <element name="address" type="string"/>
            <any namespace="##any" processContents="skip"/>
        </sequence>
    </complexType>
    <complexType name="StructWithAnyArray">
        <sequence>
            <element name="name" type="string"/>
            <element name="address" type="string"/>
            <any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="10"/>
        </sequence>
    </complexType>

    <complexType name="StructWithAnyStrict">
        <sequence>
            <element name="name" type="string"/>
            <element name="address" type="string"/>
            <any namespace="##any" processContents="strict"/>
        </sequence>
    </complexType>
    <complexType name="StructWithAnyArrayLax">
        <sequence>
            <element name="name" type="string"/>
            <element name="address" type="string"/>
            <any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="10"/>
        </sequence>
    </complexType>


    <!-- Bug 5043 -->
    <complexType name="ID_Type_Attribute">
        <attribute name="Id" type="xsd:ID"/>
    </complexType>

    <!-- Bug 5047 -->
    <complexType name="MultipleOccursSequenceInSequence">
        <sequence minOccurs="0" maxOccurs="unbounded">
            <sequence>
                <element name="value" type="xsd:integer"/>
            </sequence>
        </sequence>
    </complexType>
    
    <!-- Types containing binary data -->
    <complexType name="StructWithBinary">
	<sequence>
	    <element name="hex" type="hexBinary"/>
	    <element name="base64" type="base64Binary"/>
	</sequence>
    </complexType>
    <complexType name="ChoiceWithBinary">
	<choice>
	    <element name="hex" type="hexBinary"/>
	    <element name="base64" type="base64Binary"/>
	</choice>
    </complexType>
    <!-- bug 5115 -->
    <complexType name="ExtBase64Binary">
      <simpleContent>
        <extension base="base64Binary">
          <attribute name="Id" type="int" use="optional"/>
        </extension>
      </simpleContent>
    </complexType>

  </itst:it_test_group>
  <itst:it_test_group ID="3">

    <!-- Multiple occuring sequences -->
    <complexType name="OccuringStruct">
	<sequence minOccurs="1" maxOccurs="5">
	    <element name="varFloat" type="xsd:float"/>
	    <element name="varInt" type="xsd:int" minOccurs="0"/>
	    <element name="varString" type="xsd:string"/>
	</sequence>
	<attribute name="varAttrib" type="xsd:string"/>
    </complexType>

    <complexType name="OccuringStruct1">
	<sequence minOccurs="0" maxOccurs="unbounded">
	    <element name="varFloat" type="xsd:float" nillable="true"/>
	    <element name="varInt" type="xsd:int" minOccurs="1" maxOccurs="10" />
	    <element name="varString" type="xsd:string"/>
	</sequence>
    </complexType>

    <complexType name="OccuringStruct2">
	<sequence>
	    <element name="varFloat" type="xsd:float"/>
	    <sequence minOccurs="2" maxOccurs="5">
		<element name="varInt" type="xsd:int" />
		<element name="varString" type="xsd:string"/>
	    </sequence>
	</sequence>
    </complexType>

    <!-- Multiple occuring choices -->
    <complexType name="OccuringChoice">
	<choice minOccurs="1" maxOccurs="5">
	    <element name="varFloat" type="xsd:float"/>
	    <element name="varInt" type="xsd:int" />
	    <element name="varString" type="xsd:string"/>
	</choice>
	<attribute name="varAttrib" type="xsd:string"/>
    </complexType>

    <complexType name="OccuringChoice1">
	<choice minOccurs="0" maxOccurs="unbounded">
	    <element name="varFloat" type="xsd:float" nillable="true"/>
            <!-- Multiple occuring elements in Choice not supported in
                 code generation for reflection - Bug #6151
            <element name="varInt" type="xsd:int" minOccurs="1" maxOccurs="10" />
            -->
	    <element name="varInt" type="xsd:int"/>
	</choice>
    </complexType>

    <complexType name="OccuringChoice2">
	<choice minOccurs="0">
	    <element name="varInt" type="xsd:int" />
	    <element name="varString" type="xsd:string"/>
	</choice>
    </complexType>

    <!-- Types with substitution grroups -->

    <complexType itst:it_no_test="true" name="sgBaseType_A">
        <sequence>
            <element name="varInt" type="unsignedLong"/>
        </sequence>
    </complexType>
    
    <complexType itst:it_no_test="true" name="sgDerivedType_B">
        <complexContent>
            <extension base="tns:sgBaseType_A">
                <sequence>
                    <element name="varString" type="string"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>
    
    <complexType itst:it_no_test="true" name="sgDerivedType_C">
        <complexContent>
            <extension base="tns:sgBaseType_A">
                <sequence>
                    <element name="varFloat" type="double"/>
                </sequence>
            </extension>
        </complexContent>
    </complexType>

    <element itst:it_no_test="true" name="sg01BaseElement_A" type="tns:sgBaseType_A"/>
    <element itst:it_no_test="true" name="sg01DerivedElement_B" type="tns:sgDerivedType_B" substitutionGroup="tns:sg01BaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg01DerivedElement_C" type="tns:sgDerivedType_C" substitutionGroup="tns:sg01BaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg02BaseElement_A" type="tns:sgBaseType_A"/>
    <element itst:it_no_test="true" name="sg02DerivedElement_B" type="tns:sgDerivedType_B" substitutionGroup="tns:sg02BaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg02DerivedElement_C" type="tns:sgDerivedType_C" substitutionGroup="tns:sg02BaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg03AbstractBaseElement_A" type="tns:sgBaseType_A" abstract="true"/>
    <element itst:it_no_test="true" name="sg03DerivedElement_B" type="tns:sgDerivedType_B" substitutionGroup="tns:sg03AbstractBaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg03DerivedElement_C" type="tns:sgDerivedType_C" substitutionGroup="tns:sg03AbstractBaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg04NillableBaseElement_A" type="tns:sgBaseType_A" nillable="true"/>
    <element itst:it_no_test="true" name="sg04DerivedElement_B" type="tns:sgDerivedType_B" substitutionGroup="tns:sg04NillableBaseElement_A" final="#all"/>
    <element itst:it_no_test="true" name="sg04DerivedElement_C" type="tns:sgDerivedType_C" substitutionGroup="tns:sg04NillableBaseElement_A" final="#all"/>

    <complexType name="StructWithSubstitutionGroup">
        <sequence>
            <element ref="tns:sg01BaseElement_A"/>
        </sequence>
    </complexType>

    <complexType name="StructWithSubstitutionGroupAbstract">
        <sequence>
            <element ref="tns:sg03AbstractBaseElement_A"/>
        </sequence>
    </complexType>
    
    <complexType name="StructWithSubstitutionGroupNil">
        <sequence>
            <element ref="tns:sg04NillableBaseElement_A"/>
        </sequence>
    </complexType>
    
    <complexType name="StructWithMultipleSubstitutionGroups">
        <sequence>
            <element name="varFloat" type="double"/>
            <element ref="tns:sg01BaseElement_A"/>
            <element name="varInt" type="unsignedLong"/>
            <element ref="tns:sg02BaseElement_A"/>
            <element name="varString" type="string"/>
        </sequence>
    </complexType>
    
    <complexType name="ChoiceWithSubstitutionGroup">
        <choice>
            <element ref="tns:sg01BaseElement_A"/>
            <element name="varInt" type="unsignedLong"/>
        </choice>
    </complexType>

    <complexType name="ChoiceWithSubstitutionGroupAbstract">
        <choice>
            <element ref="tns:sg03AbstractBaseElement_A"/>
            <element name="varInt" type="unsignedLong"/>
        </choice>
    </complexType>
    
    <complexType name="ChoiceWithSubstitutionGroupNil">
        <choice>
            <element ref="tns:sg04NillableBaseElement_A"/>
            <element name="varInt" type="unsignedLong" nillable="true"/>
        </choice>
    </complexType>

    <!-- Recursive elements-->
    <element itst:it_no_test="true" name="RecEl" type="tns:RecElType"/>
    <complexType name="RecElType">
        <sequence>
            <element name="varInt" type="int"/>
            <element ref="tns:RecElNext"/>
        </sequence>
    </complexType>
    
    <element itst:it_no_test="true" name="RecElNext" type="tns:RecElNextType"/>
    <complexType itst:it_no_test="true" name="RecElNextType">
        <sequence>
            <element ref="tns:RecEl" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    
    <!-- Imbricated recursions -->
    <element itst:it_no_test="true" name="RecOuter" type="tns:RecOuterType"/>
    <complexType name="RecOuterType">
        <sequence>
            <element name="varInt" type="int"/>
            <element ref="tns:RecMostInner" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="tns:RecInner" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="tns:RecOuterNext"/>
        </sequence>
    </complexType>

    <element itst:it_no_test="true" name="RecOuterNext" type="tns:RecOuterNextType"/>
    <complexType itst:it_no_test="true" name="RecOuterNextType">
        <sequence>
            <element ref="tns:RecOuter" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <element itst:it_no_test="true" name="RecInner" type="tns:RecInnerType"/>
    <complexType itst:it_no_test="true" name="RecInnerType">
        <sequence>
            <element name="varInt" type="int"/>
            <element ref="tns:RecMostInner" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="tns:RecInnerNext"/>
        </sequence>
    </complexType>

    <element itst:it_no_test="true" name="RecInnerNext" type="tns:RecInnerNextType"/>
    <complexType itst:it_no_test="true" name="RecInnerNextType">
        <sequence>
            <element ref="tns:RecInner" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    
    <element itst:it_no_test="true" name="RecMostInner" type="tns:RecMostInnerType"/>
    <complexType itst:it_no_test="true" name="RecMostInnerType">
        <sequence>
            <element name="varInt" type="int"/>
            <element ref="tns:RecMostInnerNext"/>
        </sequence>
    </complexType>

    <element itst:it_no_test="true" name="RecMostInnerNext" type="tns:RecMostInnerNextType"/>
    <complexType itst:it_no_test="true" name="RecMostInnerNextType">
        <sequence>
            <element ref="tns:RecMostInner" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
  </itst:it_test_group>

</schema>

