package org.objectweb.celtix.systest.ws.addressing;

import java.lang.reflect.UndeclaredThrowableException;
import java.net.URL;
import java.util.List;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.handler.Handler;
import javax.xml.ws.handler.LogicalHandler;
import javax.xml.ws.handler.LogicalMessageContext;

import org.easymock.EasyMock;
import org.easymock.IArgumentMatcher;

import org.objectweb.celtix.BusException;
import org.objectweb.celtix.bus.ws.addressing.MAPAggregator;
import org.objectweb.celtix.systest.common.ClientServerTestBase;
import org.objectweb.celtix.ws.addressing.AddressingProperties;
import org.objectweb.hello_world_soap_http.Greeter;
import org.objectweb.hello_world_soap_http.SOAPService;
import static org.objectweb.celtix.ws.addressing.JAXWSAConstants.CLIENT_ADDRESSING_PROPERTIES_INBOUND;
import static org.objectweb.celtix.ws.addressing.JAXWSAConstants.CLIENT_ADDRESSING_PROPERTIES_OUTBOUND;


/**
 * Tests the addition of WS-Addressing Message Addressing Properties.
 */
public class MAPTest extends ClientServerTestBase {
    private static final String[] CLIENT_PROPERTIES = 
    {CLIENT_ADDRESSING_PROPERTIES_OUTBOUND, 
     CLIENT_ADDRESSING_PROPERTIES_INBOUND};
    private QName serviceName = new QName("http://objectweb.org/hello_world_soap_http", "SOAPService");    
    private QName portName = new QName("http://objectweb.org/hello_world_soap_http", "SoapPort");
    private Greeter greeter;
    private LogicalHandler userHandler;

    public static void main(String[] args) {
        junit.textui.TestRunner.run(MAPTest.class);
    }
    
    public void setUp() throws BusException {
        super.setUp();
        Server.testCase = this;
        URL wsdl = getClass().getResource("/hello_world.wsdl");        
        SOAPService service = new SOAPService(wsdl, serviceName);
        greeter = (Greeter)service.getPort(portName, Greeter.class);
        launchServer(Server.class);
        BindingProvider provider = (BindingProvider)greeter;
        List<Handler> handlerChain = provider.getBinding().getHandlerChain();
        handlerChain.add(new MAPAggregator());
        userHandler = EasyMock.createNiceMock(LogicalHandlerWithLMC.class);
        handlerChain.add(userHandler);
    }
    
    public void testRequestResponse() throws Exception {
        EasyMock.reportMatcher(new ContextMatcher(CLIENT_PROPERTIES));
        LogicalMessageContext context = 
            EasyMock.createNiceMock(LogicalMessageContext.class);
        EasyMock.expect(userHandler.handleMessage(context)).andReturn(true);
        userHandler.handleMessage(context);
        EasyMock.replay(userHandler);
 
        try {
            String greeting = greeter.greetMe("MAPTest");
            assertNotNull("no response received from service", greeting);
            System.out.println("response from service: " +  greeting);
        } catch (UndeclaredThrowableException ex) {
            throw (Exception)ex.getCause();
        }

        EasyMock.verify(userHandler);
    } 
    
    private static final class ContextMatcher implements IArgumentMatcher {
        private int index;
        private String[] names;

        private ContextMatcher(String[] n) {
            this.names = n;
        }

        public boolean matches(Object obj) {
            System.out.println("check match ..." + obj);
            if (obj instanceof LogicalMessageContext) {
                LogicalMessageContext context = (LogicalMessageContext)obj;
                AddressingProperties maps = 
                    (AddressingProperties)context.get(names[index++]);
                System.out.println("maps: " + maps + (maps != null ? maps.getMessageID() : "empty"));
                return maps != null && maps.getMessageID() != null;
            }
            return false;
        }    

        public void appendTo(StringBuffer buffer) {
            buffer.append("context expectation failed, property names:");
            for (int i = 0; i < names.length; i++) {
                buffer.append(" ").append(names[i]);
            }
            buffer.append(", index: ").append(Integer.toString(index));
        }
    }

    public static interface LogicalHandlerWithLMC extends LogicalHandler<LogicalMessageContext> {
    }
}
